bz2.spt
 demobz([3 5 5 60 70 80])

/**
 *


/**
x1 = {-1.3200706E-8 -2.0799538E-8 -6.451335E-8}
x2 = [
{-5.9604645E-8 -0.75462335 -1.5092467}
{-0.75462335 -5.9604645E-8 -1.5092467}
{0.7546234 -1.5092466 -2.3841858E-7}
{-2.9802322E-8 -1.5092466 -0.7546234}
{1.5092466 2.3841858E-7 -0.7546233}
{-1.5092467 -1.1920929E-7 -0.7546233}
{-1.5092468 -0.75462335 -5.9604645E-8}
{0.0 0.7546232 -1.5092467}
{-0.75462294 -1.5092468 1.5347203E-7}
{0.0 -1.5092468 0.75462306}
{1.5092466 0.75462335 -1.4901161E-7}
{0.7546234 -1.1920929E-7 -1.5092466}
{5.9604623E-8 1.5092466 -0.75462353}
{-2.2740997E-7 -0.7546235 1.5092466}
{0.7546232 1.1920929E-7 1.5092466}
{1.5092467 -2.2351742E-8 0.7546233}
{1.5092466 -0.75462335 5.9604645E-8}
{0.0 1.5092466 0.75462323}
{-0.75462323 1.5092466 -6.266474E-8}
{-1.5092467 0.7546233 -1.1920929E-7}
{-1.5092467 0.0 0.7546232}
{0.75462323 1.5092468 0.0}
{0.0 0.75462335 1.5092466}
{-0.7546233 5.9604645E-8 1.5092466}
]
polyhedra ID p1 @x1 to @x2
reset;center {0.0 0.0 0.0}; rotate z -125.12; rotate y 48.78; rotate z 131.98; zoom 387.35; set rotationRadius 10.0;

/**
  polyhedron @{{ "vertexCount":10,"colorEdge":"[x008000]","center":{0.9810103 0.9810104 0.9810104},"id":"pbz2_1_14_","elemNos":[ -2,-2,-2,-2,-2,-2,-2,-2,-2,-2 ],"faces":[ [ 6,5,8 ],[ 0,1,9,6,8,7 ],[ 1,2,9 ],[ 1,0,3,4,2 ],[ 4,3,7,8,5 ],[ 2,4,5,6,9 ],[ 3,0,7 ] ],"triangles":[ [ 1,0,2,-5 ],[ 0,1,6,-1 ],[ 2,0,3,-2 ],[ 3,0,7,-7 ],[ 0,6,7,-4 ],[ 1,2,9,-7 ],[ 6,1,9,-6 ],[ 2,3,4,-6 ],[ 2,4,5,-3 ],[ 2,5,6,-2 ],[ 2,6,9,-6 ],[ 4,3,5,-5 ],[ 5,3,7,-2 ],[ 6,5,8,-7 ],[ 5,7,8,-6 ],[ 7,6,8,-6 ] ],"scale":-1.2,"color":"[x008000]","bsFlat":({}),"vertices":[ {1.5092466 0.7546235 2.2108375E-7},{1.5092466 2.6961779E-8 0.7546237},{1.5092466 0.7546235 1.5092466},{1.5092467 1.5092467 0.7546232},{1.5092467 1.5092466 1.5092467},{0.7546231 1.5092467 1.5092466},{0.0 0.75462335 1.5092466},{0.7546232 1.5092468 2.3841858E-7},{1.1920929E-7 1.5092468 0.7546233},{0.75462335 5.9604645E-8 1.5092467},{0.9810103 0.9810104 0.9810104} ],"modelIndex":0 }} ;


/**
load caffeine.xyz
select on search("[r5;d2,d4][r5;d4,d2][d3;r5]")
/**
LOAD "$Carbetapentane citrate"
select on search("(C=O.C=O)")


/**
$ load $OC=[C@@]=C(C)F
$ print {*}.find("SMILES","C(O)=[C@]=C(C)F")

$ print {*}.find("SMILES","OC=[C@@]=C(C)F")

$ print "OC=[C@@]=C(C)F".find("SMILES","C(O)=[C@]=C(C)F")

$ print !!"OC=[C@@]=C(C)F".find("SMILES","C(O)=[C@]=C(C)F")

$ print !!"C(O)=[C@]=C(C)F".find("SMILES","C(O)=[C@]=C(C)F")

$ print !"OC=[C@]=C(C)F".find("SMILES","C(O)=[C@]=C(C)F")

$ print !"C(O)=[C@]=C(C)F".find("SMILES","OC=[C@]=C(C)F") 

$ print !"C(O)=[C@]=C(C)F".find("SMILES","O[CH]=[C@]=C(C)F")

$ print !"C([H])(O)=[C@]=C(C)F".find("SMILES","O[CH]=[C@]=C(C)F")

$ print !"C([H])(O)=[C@]=C(C)F".find("SMILES","OC([H])=[C@]=C(C)F")

$ print !!"C([H])(O)=[C@]=C(C)F".find("SMILES","OC([H])=[C@@]=C(C)F")

$ print !"ON=[C@]=C(C)F".find("SMILES","N(O)=[C@]=C(C)F")

$ print !!"N(O)=[C@]=C(C)F".find("SMILES","N(O)=[C@]=C(C)F")


$ print !"N(O)=[C@]=C(C)F".find("SMILES","ON=[C@]=C(C)F") 

$ print "[H]N=[C@]=C(C)F".find("SMILES","[NH]=[C@]=C(C)F")

$ print !!"N([H])=[C@]=C(C)F".find("SMILES","[NH]=[C@]=C(C)F")

$ print "[H]N=[C@]=C(C)F".find("SMILES","[NH]=[C@]=C(C)F")

/**
 *


extra switch of H

/**
 *  print "N[Co@H]1356.C6.F5.Br3.S1".find("SMILES","N[Co@OH1]12356.C6.F5.Br3.[H]1.S2")

/**
print "N[Co@]12356.C6.F5.Br3.S1.I2".find("SMILES","N[Co@]12356.C6.F5.Br3.S1.I2")

/**

print "[Co@OH1]123456.C6.F5.Br3.N4.S1.I2".find("SMILES",
  "[Co@OH2]623451.C6.F5.Br3.N4.S1.I2")


/**

print "[Co@OH1]123456.C6.F5.Br3.N4.S1.I2".find("SMILES",
  "[Co@OH1]123456.C6.F5.Br3.N4.S1.I2")


print "[Co@OH1]123456.C6.F5.Br3.N4.S1.I2".find("SMILES",
  "[Co@OH2]623451.C6.F5.Br3.N4.S1.I2")

/**

print "[Co@]123456.C6.F5.Br3.N4.S1.I2".find("SMILES","[Co@]123456.C6.F5.Br3.N4.S1.I2")

/**
load "c:/jmol-dev/bobtest/stereoOH2.mol"
x = show("smiles")
print x
print {*}.find("SMILES",x)
print {*}.find("SMILES","[Co@]123456.C6([H])([H])[H].F5.Br3.[H]4.S1[H].I2")

print "N[Co@]12356.C6.F5.Br3.S1.I2".find("SMILES","N[Co@]12356.C6.F5.Br3.S1.I2")


//print {*}.find("SMILES","[Co@@H]12345.C5.F3.Br4.S1.I2")
//print {*}.find("SMILES","[Co@@H]12345.C5.F3.Br4.S1.I2")


/**
load stereoTS.mol
x = "[SH](Br)F"
print x
print {*}.find("SMILES","[S@TS1H](Br)F")
print {*}.find("SMILES","[S@TS1]([H])(Br)F")
print {*}.find("SMILES","[H][S@TS1](Br)F")

print {*}.find("SMILES","[S@TS2H](Br)F")
print {*}.find("SMILES","[S@TS2]([H])(Br)F")
print {*}.find("SMILES","[H][S@TS2](Br)F")

print {*}.find("SMILES","[S@TS3H](Br)F")
print {*}.find("SMILES","[S@TS3]([H])(Br)F")
print {*}.find("SMILES","[H][S@TS3](Br)F")

print {*}.find("SMILES","Br[S@TS3]([H])F")
print {*}.find("SMILES","Br[S@TS3H]F")



/**

load stereoTP.xyz
print {*}.find("SMILES","[B@@H]1234.Br1.Cl2.[O]3.F4")

/**

load stereosp.mol
show smiles
print {*}.find("SMILES","[S@SP3H](Br)(Cl)F")

/**
load $biphenol
connect @{@7|@8} @{@1|@2} atropisomer
print {*}.find("SMARTS","c1(O)ccccc1^22-c2ccccc2O")
 x = show("SMILES")
print x
print {*}.find("SMILES",x)
print {*}.find("SMARTS",x)
print "nothing=" + {*}.find("SMARTS","c1(O)ccccc1!^22-c2ccccc2O")
print {*}.find("SMARTS","c1(O)cccc{a1^22-a}2ccccc2O")
/**
set debug

print "C[C@H](O)CC".find("SMILES","C[C@H](O)CC")
/**
//load :biphenol
//   0  1 357911
x = "c1(O)ccccc1^^22-c2ccccc2O"
y = "c1(O)ccccc1^22-c2ccccc2O"
print x.find("SMILES",x);
print y.find("SMILES",y);
print x.find("SMILES",y);
print y.find("SMILES",x);


/**
print {*}.find("SMILES","c1ccccc1-c2ccccc2")
print "unrotated"  
print {*}.find("SMILES","c1ccccc1^-c2ccccc2")
print {*}.find("SMILES","c1ccccc1^^-c2ccccc2")
ROTATE BRANCH @7 @1 70
print "rotated"
print {*}.find("SMILES","c1ccccc1^-c2ccccc2")
print {*}.find("SMILES","c1ccccc1^^-c2ccccc2")
/**
load $tetrahydropyrrol
print {*}.find("SMILES","C1C(CCN1)")

/**
print "OH"
x = "[Co@]123456.C6.F5.Br3.Cl4.S1.I2"
print compare(x,"C[Co@](F)(Cl)(Br)(I)S","isomer")
print compare(x,"C[Co@OH1](F)(Cl)(Br)(I)S","isomer")
print compare(x,"S[Co@OH5](F)(I)(Cl)(C)Br","isomer")
print compare(x,"[Co@OH5](S)(F)(I)(Cl)(C)Br","isomer")
print compare(x,"C[Co@](F)(Cl)(Br)(I)S","isomer")
print compare(x,"F[Co@@](S)(I)(C)(Cl)Br","isomer")
print compare(x,"S[Co@OH5](F)(I)(Cl)(C)Br","isomer")
print compare(x,"Br[Co@OH9](C)(S)(Cl)(F)I","isomer")
print compare(x,"Br[Co@OH12](Cl)(I)(F)(S)C","isomer")
print compare(x,"Cl[Co@OH15](C)(Br)(F)(I)S","isomer")
print compare(x,"Cl[Co@OH19](C)(I)(F)(S)Br","isomer")
print compare(x,"I[Co@OH27](Cl)(Br)(F)(S)C","isomer")

print compare("C[Co@](F)(Cl)(Br)(I)S",x,"isomer")
print compare("S[Co@OH5](F)(I)(Cl)(C)Br",x,"isomer")
print compare("[Co@OH5](S)(F)(I)(Cl)(C)Br",x,"isomer")
print compare("C[Co@](F)(Cl)(Br)(I)S",x,"isomer")
print compare("F[Co@@](S)(I)(C)(Cl)Br",x,"isomer")
print compare("S[Co@OH5](F)(I)(Cl)(C)Br",x,"isomer")
print compare("Br[Co@OH9](C)(S)(Cl)(F)I",x,"isomer")
print compare("Br[Co@OH12](Cl)(I)(F)(S)C",x,"isomer")
print compare("Cl[Co@OH15](C)(Br)(F)(I)S",x,"isomer")
print compare("Cl[Co@OH19](C)(I)(F)(S)Br",x,"isomer")
print compare("I[Co@OH27](Cl)(Br)(F)(S)C",x,"isomer")

load stereoOH.mol
print compare("C[Co@](F)(Cl)(Br)(I)S",{1.1},"isomer")
print compare("S[Co@OH5](F)(I)(Cl)(C)Br",{1.1},"isomer")
print compare("[Co@OH5](S)(F)(I)(Cl)(C)Br",{1.1},"isomer")
print compare("C[Co@](F)(Cl)(Br)(I)S",{1.1},"isomer")
print compare("F[Co@@](S)(I)(C)(Cl)Br",{1.1},"isomer")
print compare("S[Co@OH5](F)(I)(Cl)(C)Br",{1.1},"isomer")
print compare("Br[Co@OH9](C)(S)(Cl)(F)I",{1.1},"isomer")
print compare("Br[Co@OH12](Cl)(I)(F)(S)C",{1.1},"isomer")
print compare("Cl[Co@OH15](C)(Br)(F)(I)S",{1.1},"isomer")
print compare("Cl[Co@OH19](C)(I)(F)(S)Br",{1.1},"isomer")
print compare("I[Co@OH27](Cl)(Br)(F)(S)C",{1.1},"isomer")

print "TB"

x = "[As@]12345.N5.Br2.F3.Cl4.S1"

  print compare("S[As@TB1](F)(Cl)(Br)N",x,"isomer")
  print compare("S[As@TB2](Br)(Cl)(F)N",x,"isomer")
  print compare("S[As@TB5](F)(N)(Cl)Br",x,"isomer")
  print compare("F[As@TB10](S)(Cl)(N)Br",x,"isomer")
  print compare("F[As@TB15](Cl)(S)(Br)N",x,"isomer")
  print compare("Br[As@TB20](Cl)(S)(F)N",x,"isomer")

load stereoTB.mol

print {*}.find("SMILES",x)
  print compare(x,{1.1},"isomer")

  print compare("S[As@TB1](F)(Cl)(Br)N",{1.1},"isomer")
  print compare("S[As@TB2](Br)(Cl)(F)N",{1.1},"isomer")
  print compare("S[As@TB5](F)(N)(Cl)Br",{1.1},"isomer")
  print compare("F[As@TB10](S)(Cl)(N)Br",{1.1},"isomer")
  print compare("F[As@TB15](Cl)(S)(Br)N",{1.1},"isomer")
  print compare("Br[As@TB20](Cl)(S)(F)N",{1.1},"isomer")


/**
 print "CC[C:1]".find("SMILES","/aromaticOpen/CC[C:1]")

/**

t3.spt
$ print {!_H}.find("smiles","c1ccccc1'c2ccccc2")

/**

load $1,2-dimethoxycyclobutadiene
set debug
x = "COC1=CC=C1OC"
select on smiles(@x)
print x
print {selected}
print {*}.find("SMILES",x)

/**

x = "/aromaticOpen/COC1=CC=C1OC"
select on smiles(@x)
print x
print {selected}
print {*}.find("SMILES",x)
x = "/aromaticStrict/COC1=CC=C1OC"
select on smiles(@x)
print x
print {selected}
print {*}.find("SMILES",x)

load $2-bromobutane
print "Br[C@@H](C)CC".find("SMARTS","[D2]")

//load $benzene
//select on search("[aH]")


load $1,2-dimethoxybenzene
set debug
x = "COC=1C=2OC.C=1C=CC=2"
select on smiles(@x)
print x
print {selected}
print {*}.find("SMILES",x)
x = "/aromaticOpen/COC1=C2OC.C1=CC=C2"
select on smiles(@x)
print x
print {selected}
print {*}.find("SMILES",x)
x = "/aromaticStrict/COC1=C2OC.C1=CC=C2"
select on smiles(@x)
print x
print {selected}
print {*}.find("SMILES",x)

 load $morphine

function getJMEHs() {
var x= show("chemical mrv")
var x2 = x.split('x2="')[2].split('"')[1].split(' ')
var y2 = x.split('y2="')[2].split('"')[1].split(' ')
var el = x.split('elementType="')[2].split('"')[1].split(' ')
var s =  '' + {*}.size + ' ' + {*}.bonds.size + ' ' + el.join(x2).join(y2).join(' ').replace('\n',' ')
var b = x.split("<bond ")
for (var i = 2; i <= b.length; i++) {
 var bi = b[i]
 var at = bi.split('atomRefs2="')[2].split('"')[1].replace('a','')
 var n = (bi.find('>W<') ? -1 : bi.find('>H<') ? -2 : bi.split('order="')[2].split('"')[1])  
 s += ' ' +  at + ' ' + n
}
return s
}

x = getJMEHs()
print x

/**

40 44 C 6.95054 2.92931 C 5.68212 3.66163 C 4.41368 2.92931 O 3.08001 3.69931 C 4.41368 1.46464 C 5.68212 0.732313 C 5.68212 -0.732335 C 4.41368 -1.46467 H 3.15634 -1.82878 O 3.43631 0.0813547 C 4.41368 -2.92932 H 4.41368 -3.88412 O 3.08 -3.69931 C 5.68212 -3.66165 C 6.95054 -2.92932 C 6.95054 -1.46467 H 7.79196 -2.46742 C 8.21898 -0.732335 H 8.66773 -1.96201 C 8.21898 0.732313 C 6.95054 1.46464 N 9.4874 -1.46467 C 10.5364 -2.59214 C 8.61143 0.341738 C 6.52837 0.341738 H 7.77742 3.40671 H 5.68212 4.61643 H 3.08001 4.65411 H 3.08 -4.65411 H 5.68212 -4.61645 H 7.77742 -3.40671 H 9.15927 0.566514 H 8.54554 1.62953 H 9.83737 -3.24252 H 11.1868 -3.29117 H 11.2354 -1.94176 H 9.5233 0.624821 H 8.46827 1.28574 H 6.739 1.27301 H 5.6665 0.75263 1 2 2 2 3 1 3 4 1 3 5 2 5 6 1 6 7 1 7 8 1 8 9 -1 8 10 1 5 10 1 8 11 1 11 12 1 11 13 -2 11 14 1 14 15 2 15 16 1 16 17 -1 7 16 1 16 18 1 18 19 -2 18 20 1 20 21 1 1 21 1 6 21 2 18 22 1 22 23 1 22 24 1 24 25 1 7 25 -1 1 26 1 2 27 1 4 28 1 13 29 1 14 30 1 15 31 1 20 32 1 20 33 1 23 34 1 23 35 1 23 36 1 24 37 1 24 38 1 25 39 1

<?xml version="1.0" ?>
<cml>
<MDocument>
 <MChemicalStruct>
  <molecule>
   <atomArray
    atomID="a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24"
    elementType="C C C C C C C O C H C C C H H H H H H H H H H H"
    x2="6.96944 8.32442 9.69777 9.69777 8.32442 6.96944 5.65678 5.65678 4.34412 4.34412 3.03146 4.34412 5.65678 8.31355 10.5098 10.5098 8.31355 2.56158 2.21761 3.50134 4.02271 3.41865 6.26084 5.05272"
    y2="1.48946 2.29986 1.52101 -0.0578191 -0.836671 -0.0262686 -0.784134 -2.29986 -0.0262686 -0.966021 -0.784134 1.48946 2.24733 3.23955 1.99402 -0.530829 -1.77636 0.0297161 -1.25401 -1.59798 2.37254 1.32628 2.96722 2.96722"
    x3="-0.786548 -2.12643 -3.09605 -2.73941 -1.4083 -0.424132 1.00059 1.34834 2.01314 2.01114 3.40809 1.5994 0.244886 -2.41684 -4.13949 -3.50317 -1.12715 3.40734 4.13115 3.67957 2.34518 1.526 -0.0851595 0.34888"
    y3="-0.894189 -1.2341 -0.249573 1.08797 1.44557 0.453736 0.837296 1.97976 -0.246595 -0.463695 0.206258 -1.49698 -1.98757 -2.27433 -0.526039 1.85092 2.48834 0.40465 -0.578083 1.11483 -2.27918 -1.25187 -2.82226 -2.32724"
    z3="-0.0511069 -0.0055017 0.0371534 0.0351805 -0.00755255 -0.0491408 -0.0841871 0.125806 -0.391224 -1.45938 0.044591 0.395939 -0.107884 -0.00355911 0.0719144 0.0667294 -0.00960828 1.11638 -0.179225 -0.492904 0.2542 1.45548 0.51055 -1.13837"
   />
   <bondArray>
     <bond bondID="b1" atomRefs2="a1 a2" order="1"/>
     <bond bondID="b2" atomRefs2="a2 a3" order="2"/>
     <bond bondID="b3" atomRefs2="a3 a4" order="1"/>
     <bond bondID="b4" atomRefs2="a4 a5" order="2"/>
     <bond bondID="b5" atomRefs2="a5 a6" order="1"/>
     <bond bondID="b6" atomRefs2="a1 a6" order="2"/>
     <bond bondID="b7" atomRefs2="a6 a7" order="1"/>
     <bond bondID="b8" atomRefs2="a7 a8" order="2"/>
     <bond bondID="b9" atomRefs2="a7 a9" order="1"/>
     <bond bondID="b10" atomRefs2="a9 a10" order="1"/>
     <bond bondID="b11" atomRefs2="a9 a11" order="1">
      <bondStereo>W</bondStereo>
     </bond>
     <bond bondID="b12" atomRefs2="a9 a12" order="1"/>
     <bond bondID="b13" atomRefs2="a12 a13" order="1"/>
     <bond bondID="b14" atomRefs2="a1 a13" order="1"/>
     <bond bondID="b15" atomRefs2="a2 a14" order="1"/>
     <bond bondID="b16" atomRefs2="a3 a15" order="1"/>
     <bond bondID="b17" atomRefs2="a4 a16" order="1"/>
     <bond bondID="b18" atomRefs2="a5 a17" order="1"/>
     <bond bondID="b19" atomRefs2="a11 a18" order="1"/>
     <bond bondID="b20" atomRefs2="a11 a19" order="1"/>
     <bond bondID="b21" atomRefs2="a11 a20" order="1"/>
     <bond bondID="b22" atomRefs2="a12 a21" order="1"/>
     <bond bondID="b23" atomRefs2="a12 a22" order="1"/>
     <bond bondID="b24" atomRefs2="a13 a23" order="1"/>
     <bond bondID="b25" atomRefs2="a13 a24" order="1"/>
   </bondArray>
  </molecule>
 </MChemicalStruct>
</MDocument>
</cml>
// load $caffeine;x = show("chemical " + prompt("type?", "")).trim();print x;load inline @x;label %a; background labels yellow
 

// load "file:///C:/jmol-dev/workspace/Jmol-datafiles/cif/c2cc34714h.cif"
 
// load "file:///C:/jmol-dev/workspace/Jmol-datafiles/shelx/6063.res"
 
 
 
load =2gxa.mmtf filter "biomolecule 2"
 
 //load =1auy.pdb {1 1 1} filter "biomolecule 1;bychains"
//load =1auy.cif {1 1 1} filter "biomolecule 1;bychains"
//load =1auy.mmtf {1 1 1} filter "biomolecule 1;bychains"
//load =1cdr.mmtf
//load =1crn
//load append =1cdr


//load =2btv as "2btv.pdb"
//load 2btv.pdb {1 1 1} filter "bychain;"

// load =1a37.pdb
// load =1auy.cif
//load =1crn.mmtf

//load =1blu.mmtf

//load =1jgq.mmtf // insertion code test

//load http://mmtf.rcsb.org/full/1CRN // bond test

//set autobond false
//x =load("http://mmtf.rcsb.org/full/2TBV", true)
//write var x "2TBV.mmtf"

//load =2tbv.cif filter "biomolecule 1"

//load =2tbv.mmtf filter "biomolecule 1" // symmetry test

//load http://mmtf.rcsb.org/full/3J9M // big test


//load http://mmtf.rcsb.org/full/1CDR as "1CDR.mmtf"

//load =1cdr.cif

/**
$ load c:/temp/t2.pse filter "nosurfaces"
/**
function fixPSE(xxxx, asSpheres) {
  // load the file
  var file = xxxx + ".pse"
  print "loading " + file
  load @file
  // replace all surfaces with JVXL equivalents
  var info = getProperty("shapeInfo.isosurface")
  for (var iso in info) {
    var id = iso.ID
    print "fixing isosurface " + id + " in " + file
    if (asSpheres) {
      var x = ("$" + id).getProperty("atoms");
      select x
      print "selected " + x.count + " atoms"
      spacefill on
      isosurface ID @id delete
    } else {
      isosurface ID @id cache
    }
  }
  // save as a PNGJ file
  write "temp.png" as PNGJ
  // but this would just repeat the creation of surfaces, 
  // so we need some flag to indicate not to do that
  // so we load the binary (zip) data from the PNGJ file...
  print "creating temp.png"
  var x = load("temp.png",true)
  // ...add a FILTER option  to the state...
  x["state.spt"] = x["state.spt"].replace('.pse"', '.pse" filter "NOSURFACES"')
  print x["state.spt"].lines.find("pse")
  // ...and re-write the PNGJ file. Simple enough!
  print "creating " + xxxx + ".png"
  write var x @{xxxx + ".png"}
}

fixPSE "test" true

  
/**
load =magndata/0.34 packed
print symop(5,"time")
    show symop "-x+1/2,y,-z+1/2(-mx,my,-mz)"
/**

function  showSGClass(i) {
  //set pointgroupdistancetolerance 0.01
  //set pointgrouplineartolerance 0.5
  var f = "sg/" + (i >= 143 && i <= 194 ? "testHex.cif" 
   : i >= 16 && i <= 70 ? "testOrtho.cif"
   : i >= 71 && i < 143 ? "testTet.cif"
   : "test.cif")
  load orientation @f spacegroup @i
  center {1/2 1/2 1/2}
  set zoomlarge false
  spacefill -0.15
  pg = pointgroup("spacegroup", @1)
  pgname = pg.name
  if (pgname == "S6")
    pgname = "C3i"
  cl = show("spacegroup/Class").split(":")[2].trim()

  set echo myecho [0 0]
  echo @{_M.spaceGroup}
       
  set echo bottom right
  echo @{cl + "      "}
       
  print "" + i + "\t found " + pg.name+ "\t is "+cl;
  draw points @{@1.find("crystalClass")}
  draw id PTS pointgroup spacegroup scale 0.3

  refresh
  write @{"sg/sg" + ("000" + i)%-3 + "_class_" + pgname + ".png"} as PNGJ
   
  if (cl != pgname){
   print pg
   quit
  }

}

set zoomlarge false
n=230
for (var i = 1; i <= n; i++) {
 showSGClass(i)
}  


/**
 *

for (var i = 1; i < 100; i++) {
  showSGClass(186)
} 

/**
showSGClass 123

/**

 showsgclass 116
 
/**

  
for (var i = 1; i <= 230; i++) {
 showSGClass(i)
}  


/**
load test.cif spacegroup 2
print @1.find("crystalClass")
print pointgroup(@1.find("crystalClass")).name


/**
 print load("https://www.materialsproject.org/materials/mp-24972/cif")
 load =mp/24972
/**

load d.cif spacegroup "P 4/mmm"
connect delete
//show spacegroup
draw d5 scale 0.2 symop @1 @5
//draw d6 scale 0.2 symop @1 @6
/**
	background white
	load $caffeine
elementColors = []
  for (var e in {*}.element.pivot)
	  elementColors.push([e, {element=@e}.color])

	  function createElementKey() {
		var y = 90
		for (var ec in elementColors) {
      var e = ec[1]
      var c = ec[2]
			draw ID @{"d_"+ e} diameter 2 [90 @y %] color @c
			set echo ID @{"e_" + e} [91 @{y-1} %]
			echo @e
			font echo 24 bold sansserif
			color echo black
			y -= 5
		}
	  }
	createElementKey



/**
for (var ciffile in ["a", "test","b"]) {
 if (1==0) 
  continue;
 if (ciffile=="test")
  continue;
 x = 4;
 print ciffile
}
print x



/**
t3.spt
spacefill off
polyhedra 5.0 points 0.5 @307 to {_Al}

/**
isosurface delete
p = ({0 25 26 30 45 63})
///$ ({45 46 66 143 146});
x = ({3});
//testFlag3 = true
polyhedra 6.3 @x
//polyhedra 6.5 full @x to @p

/**
load quasi.cif {1 1 1}
show spacegroup
set bondmodeor
print {_Ru}.bonds.length.all.bin(2,3.5,0.1, "",true).format("JSON").split("],[").replace(",","\t")


/**show spacegroup "43:cab"
/**load findsym.cif
unitcell primitive
/**   
//smilesCheck.spt
//show  spacegroup 225

load $biphenyl
print {*}.find("SMILES","c1ccccc1^^c2ccccc2")

show smiles/open 

/**
load $2-butanol
select on connected(atomIndex=1) and !within(SMARTS,'[R]')
delay 1
background white
select on connected(atomIndex=1) and !within(SMARTS,'[r50]')
delay 1
background black
select on connected(atomIndex=1) and !within(SMARTS,'[r50,R]')
delay 1
background white


/**
 load quartz.cif
axes unitcell
axes offset -0.1
  
/**
load =ams/gold 1 packed
//show spacegroup
print unitcell("primitive")

/**

load quartz.cif
select _Si
polyhedra unitcell
polyhedra points 0.3
/**
 *
 * set debug 
print "OC1=CC(N)=CC=C1".find("SMILES","NC1=CC(O)=CC=C1")
print "Nc1cc(O)ccc1".find("SMILES","Nc1cc(O)ccc1")
print "OC1=CC(N)=CC=C1".find("SMILES","Nc1cc(O)ccc1")
print "OC1=CC(N)=CC=C1".find("SMILES","NC1=CC(O)=CC=C1")
print "OC1=CC(N)=CC=C1".find("SMILES/open","NC1=CC(O)=CC=C1")
print "?"
print "OC1=CC(N)=CC=C1".find("SMARTS","Nc1cc(O)ccc1",true)
print compare("OC1=CC(N)=CC=C1", "NC1=CC(O)=CC=C1", "isomer")



load ==TRY
show smiles
select on search("a") 
select on search("/open/a")  
select on search("/strict/a")



load $caffeine
show smiles
print {*}.find("SMILES")
print "strict " + {*}.find("SMILES/strict")
print "open " + {*}.find("SMILES/open")
print "open strict " + {*}.find("SMILES/open,strict")
print "all should be the same for caffeine"
print " "

load tetraene.mol
print "open " + {*}.find("SMILES/open")
show smiles
print {*}.find("SMILES")
print "strict no rings " + {*}.find("SMILES/strict")
print "open strict " + {*}.find("SMILES/open,strict")
print " "

load thiophenesoxide.mol
show smiles
print {*}.find("SMILES")
print "strict " + {*}.find("SMILES/strict")
print "open " + {*}.find("SMILES/open")
print "open strict " + {*}.find("SMILES/open,strict")
print " "

load $quinone
show smiles
print {*}.find("SMILES")
print "strict " + {*}.find("SMILES/strict")
print "open " + {*}.find("SMILES/open")
print "open strict " + {*}.find("SMILES/open,strict")
print " "

load paramethenylquinone.mol
show smiles
print {*}.find("SMILES")
print "strict " + {*}.find("SMILES/strict")
print "open " + {*}.find("SMILES/open")
print "open strict " + {*}.find("SMILES/open,strict")

load $1H-pyridin-2-one
show smiles
print {*}.find("SMILES")
print "strict " + {*}.find("SMILES/strict")
print "open " + {*}.find("SMILES/open")
print "open strict " + {*}.find("SMILES/open,strict")


/**


function test() {

}

test
macro aflow
aflowload("AgAu")

print "OH"
x = "[Co@]123456.C6.F5.Br3.Cl4.S1.I2"
print compare(x,"C[Co@](F)(Cl)(Br)(I)S","isomer")
print compare(x,"S[Co@OH5](F)(I)(Cl)(C)Br","isomer")
print compare(x,"[Co@OH5](S)(F)(I)(Cl)(C)Br","isomer")
print compare(x,"C[Co@](F)(Cl)(Br)(I)S","isomer")
print compare(x,"F[Co@@](S)(I)(C)(Cl)Br","isomer")
print compare(x,"S[Co@OH5](F)(I)(Cl)(C)Br","isomer")
print compare(x,"Br[Co@OH9](C)(S)(Cl)(F)I","isomer")
print compare(x,"Br[Co@OH12](Cl)(I)(F)(S)C","isomer")
print compare(x,"Cl[Co@OH15](C)(Br)(F)(I)S","isomer")
print compare(x,"Cl[Co@OH19](C)(I)(F)(S)Br","isomer")
print compare(x,"I[Co@OH27](Cl)(Br)(F)(S)C","isomer")

print compare("C[Co@](F)(Cl)(Br)(I)S",x,"isomer")
print compare("S[Co@OH5](F)(I)(Cl)(C)Br",x,"isomer")
print compare("[Co@OH5](S)(F)(I)(Cl)(C)Br",x,"isomer")
print compare("C[Co@](F)(Cl)(Br)(I)S",x,"isomer")
print compare("F[Co@@](S)(I)(C)(Cl)Br",x,"isomer")
print compare("S[Co@OH5](F)(I)(Cl)(C)Br",x,"isomer")
print compare("Br[Co@OH9](C)(S)(Cl)(F)I",x,"isomer")
print compare("Br[Co@OH12](Cl)(I)(F)(S)C",x,"isomer")
print compare("Cl[Co@OH15](C)(Br)(F)(I)S",x,"isomer")
print compare("Cl[Co@OH19](C)(I)(F)(S)Br",x,"isomer")
print compare("I[Co@OH27](Cl)(Br)(F)(S)C",x,"isomer")

load stereoOH.mol
print compare("C[Co@](F)(Cl)(Br)(I)S",{1.1},"isomer")
print compare("S[Co@OH5](F)(I)(Cl)(C)Br",{1.1},"isomer")
print compare("[Co@OH5](S)(F)(I)(Cl)(C)Br",{1.1},"isomer")
print compare("C[Co@](F)(Cl)(Br)(I)S",{1.1},"isomer")
print compare("F[Co@@](S)(I)(C)(Cl)Br",{1.1},"isomer")
print compare("S[Co@OH5](F)(I)(Cl)(C)Br",{1.1},"isomer")
print compare("Br[Co@OH9](C)(S)(Cl)(F)I",{1.1},"isomer")
print compare("Br[Co@OH12](Cl)(I)(F)(S)C",{1.1},"isomer")
print compare("Cl[Co@OH15](C)(Br)(F)(I)S",{1.1},"isomer")
print compare("Cl[Co@OH19](C)(I)(F)(S)Br",{1.1},"isomer")
print compare("I[Co@OH27](Cl)(Br)(F)(S)C",{1.1},"isomer")

print "TB"

x = "[As@]12345.N5.Br2.F3.Cl4.S1"

  print compare("S[As@TB1](F)(Cl)(Br)N",x,"isomer")
  print compare("S[As@TB2](Br)(Cl)(F)N",x,"isomer")
  print compare("S[As@TB5](F)(N)(Cl)Br",x,"isomer")
  print compare("F[As@TB10](S)(Cl)(N)Br",x,"isomer")
  print compare("F[As@TB15](Cl)(S)(Br)N",x,"isomer")
  print compare("Br[As@TB20](Cl)(S)(F)N",x,"isomer")

load stereoTB.mol

  print compare("S[As@TB1](F)(Cl)(Br)N",{1.1},"isomer")
  print compare("S[As@TB2](Br)(Cl)(F)N",{1.1},"isomer")
  print compare("S[As@TB5](F)(N)(Cl)Br",{1.1},"isomer")
  print compare("F[As@TB10](S)(Cl)(N)Br",{1.1},"isomer")
  print compare("F[As@TB15](Cl)(S)(Br)N",{1.1},"isomer")
  print compare("Br[As@TB20](Cl)(S)(F)N",{1.1},"isomer")
  
/**
 t3.spt


  print compare("S[As@TB1](F)(Cl)(Br)N",{1.1},"isomer")
  print compare("S[As@TB2](Br)(Cl)(F)N",{1.1},"isomer")
  print compare("S[As@TB5](F)(N)(Cl)Br",{1.1},"isomer")
  print compare("F[As@TB10](S)(Cl)(N)Br",{1.1},"isomer")
  print compare("F[As@TB15](Cl)(S)(Br)N",{1.1},"isomer")
  print compare("Br[As@TB20](Cl)(S)(F)N",{1.1},"isomer")


/**
load =1prb
save structure
restore structure
show structure

/**
load "c:/jmol-dev/bobtest/2lev-a.cif"

//load c:/temp/vib.xml
//load c:/temp/greeves/tt.xml
/**
load c:/temp/greeves/ibo012_can.xml
load c:/temp/greeves/test2.xml
load C:\temp\greeves\peptide14.spardir
refresh
prompt "OK1"
load C:\temp\greeves\cyclohexane_movie_2fromScratchNoBin.spardir.zip
refresh
prompt "OK2"
load "c:/temp/greeves/cyclohexane_movie.spardir.zip" ///as "t3.spartan"
refresh
prompt "OK3"
load C:\jmol-dev\workspace\Jmol-datafiles\spartan\n-butane_1.Prof.M0001_1.spartan //as "tp.spartan"//ethene.spartan 
refresh
prompt "OK4"
load "file:///C:/Users/RM/AppData/Local/Temp/cyclohexane_movie.spartan" //as "tb.spartan"
refresh
prompt "OK5"
set debug false

/**

function parseNetworkDefinitions(networkDefs) {
   var networkTypes = networkDefs.keys;
   for (var networkType in networkTypes) {
     var networkDef  = networkDefs[networkType];
     if (networkDef..edgeType == "") {
     }
     networkDef..renderings = [default: [size: defaultRendering..size,
subTypeSpecific: {}]];
   }
}
/**
 *
 *
 *
$ show functions
/*
 * parsenetworkdefinitions
 */
parallel{

   var networkTypes = networkDefs.keys;
   for (var networkType in networkTypes) {
     var networkDef  = networkDefs[networkType];
     if (networkDef..edgeType == "") {
     }
     networkDef..renderings = [default: [size: defaultRendering..size,
subTypeSpecific: {}]];
   }
}
   
function parseNetworkDefinitions(networkDefs) {
     if (networkDef == "") {
       print "OK"
     }
     networkDef..renderings = ["default": [b: x]];
}

 
load caffeine.xyz
t2.spt
background white
/**
try  {
load adfda
print "ok"
} catch (e) {
print e
}
background white

/**
 * for (var i = 1; i <= 7; i = i + 1)

  if(true)
    print "OK"  + i
    continue;
  endif

end for


/**
load $aspirin
load append $caffeine

/**
 *
load =ams/diamond

/**

load DATA "model"
Ethane

http://www.ichemlabs.com
  2  1  0  0  0  0            999 v2000
   -0.4330   -0.2500    0.0000 C   0  0  0  0  0  0
    0.4330    0.2500    0.0000 C   0  0  0  0  0  0
  1  2  1  0     0  0
M  END "model" filter "2D"

/**

 load =4opj filter "biomolecule 2"
/**
 load *4opj filter "biomolecule 1"

/**
 load *4opj filter "noauthorchains;biomolecule 1"
/**
load c:/temp/1.1.28.mcif
/**
toJakeBZ6b.spt
/**

for (var i from [1,2])
 print i
for (var i from [1,2])
 print i;
/**
pmesh ID "test" select ({0})  resolution 0.001 plane {0.7546 0.7546 -0.7546 -1.7082635}
pmesh mesh nofill
pmesh slab {-0.7546 -0.7546 -0.7546 -1.7082635}

/**

i=1
j=2
k=3
  if (i=1) {
    print "i=1"
    if (j=1)
      print "j != 1"
  } else {
    print "i != 1"
  }
print  "ok"
/**
//toJakeBZ3b.spt

//y= "$p4".getProperty("bsVertices")
//y = y[1].select(y[2])
//print y
//print y.count

/**
load caffeine.xyz
polyhedra ID test {0 0 0} to [{0 1 0} {1 0 0} {0 0 1} {-1, -1, -1}]

/**

load "http://scripts.iucr.org/cgi-bin/sendcif?hb0009"
polyhedra BONDS unitcell {aluminum} {_O}
/**
 *
if (showBoundBox); set showBoundBox off;set showUnitCell else set showUnitCell off;set showBoundBox endif
for(var i = 0; i < 10; i++) 
 if (i > 5)
 print i*100
print "OK"

function test () {
for (var i = 0; i < 5; i++) {
  if (i < 2) 
    print -i 

  print i
}
}
test

/**
i=1
function test
if (i=1)
print 1
print 2
print 3 
endif
end function

test
/**

function test () {
for (var i = 0; i < 5; i++) {
  if (i < 2) { 
    print -i 
  }
  print i
}
}

test

for (var i = 0; i < 5; i++)
  if (i < 2) 
    print -i
  endif 
  print i
end for 

print "??"

for (i = 1; i < 5; i++) 
  print i
  print i + 1
end for

for (var i = 0; i < 5; i++)
  if (i < 2) 
    print -i
  endif 
  print i
end for 

print "??"

for (i = 1; i < 5; i++) 
  print i
  print i + 1
end for

function test
for (var i = 0; i < 5; i++)
 if (i > -1)
  if (i > 0)
   if (i < 2)
     print "i < 2" 
     print -i
   else
     print "i >= 2" 
     print i
   endif   
  endif
 endif
 print "i="+i
end for 
end function

test

function test
for (var i = 0; i < 5; i++)
  if (i < 2) 
    print -i 
    print i
  endif
end for 
end function

test
print  "---"

function test
for (var i = 0; i < 5; i++) 
 if (i > -1)
  if (i > 0)
   if (i < 2) 
     print -i
   endif
  endif
    print i
  endif
end for 
end function

test
print  "---"

/**
/*

0
-1
1
2
3
4

*/


/**

0
0
-1
1
2
3
4

function test
for (var i = 0; i < 5; i++)
  if (i < 2) 
    print -i 
  print i
end for 
end function

test

/**

0
0
-1
1
2
3
4

/**
function test
for (var i = 0; i < 5; i++)
  if (i < 2) 
    print -i
  end if
  print i
end for 
end function

/**
i=1
function test
if (i=1)
print 1
print 2
print 3 
endif
  end function

test

/**

function test
for (var i = 0; i < 5; i++)
  if (i < 2) 
    print "i < 2 " + i 
  endif
end for 
end function


for (var i = 0; i < 5; i++)
  if (i < 2) 
    print "i < 2 " + i 
  endif
end for 
  

/**
 *
parallel twoIsosurfaces(model1, model2) {
  var x = 1
  process {
   isosurface s1 model @model1 molecular; color isosurface red
  }
  process {
   isosurface s2 model @model2 molecular; color isosurface green 
  }
  x = 2
}
  
load files "1crn.pdb" "1blu.pdb"
twoIsosurfaces("1.1", "2.1")
frame *

/**

function test
if (i=1)
print 1
print 2
print 3 
endif
end function

/**

if (showBoundBox);set showBoundBox off;set showUnitCell;else;set showUnitCell off;set showBoundBox;endif;


/**
i = 2
if (i > 1)
 if (i < 3)
  print i
  print i+1
 else 
  print 3
  print 4
 endif
 print "i > 1"
endif
print "OK"
/**

i=3
while (i <6)
print i
i++
end while

/**
 
i = 1
if (i < 3)
 print i
 print i+1
end if
print 3

/**

//set debugscript
for (i = 1; i < 5; i++) 
  print i
  print i + 1
end for

for (i = 1; i < 5; i++) {
  print i
  print i + 1
}

/**

try{
x=1
}catch(e) {
print e
}

/**

parallel twoIsosurfaces(model1, model2) {
  var x = 1
  process {
   isosurface s1 model @model1 molecular; color isosurface red
  }
  process {
   isosurface s2 model @model2 molecular; color isosurface green 
  }
  x = 2
}
  
load files "1crn.pdb" "1blu.pdb"
twoIsosurfaces("1.1", "2.1")
frame *

/**

for (i = 1; i < 5; i++) 
  print i
  print i + 1
end for

  
/**



  if (1) 
    print "ok"
    print "not"
  endif 
/**

i = 3
switch (i)
case 3: 
 print "ok"
end switch

print "now"
/**
function test()
  if (1) 
    print "ok"
    print "not"
  endif 
end function

load nacl.cif {1 1 1}
uc = unitcell();
print uc
uc = unitcell("primitive", "FCC")
print uc
unitcell @uc
uc1 = unitcell("conventional", "FCC")
print uc1
print point(uc1, {1 1 1})


/**
load nacl.cif {1 1 1}
uc = unitcell("primitive", "FCC")
unitcell @uc
uc1 = unitcell("conventional", "FCC")
print uc1
unitcell @uc1
polyhedron 3.0 unitcell


load quartz.cif
uc = unitcell()
print uc
uc1 = unitcell(uc, "reciprocal", 10)
print uc1

/**
 //set debug;set debugscript
test.spt
//script  c:/temp/brillouin.spt
/**
set echo ID "hovermessage" 0% 100%
label on

/**
x = [key_1:[type:"a"],key_2:[type:"b"],key_3:[type:"a"]]
print x.select("* WHEREIN type='a'").format("JSON");
y = [
  [key_1:[type:"a"],key_2:[type:"b"],key_3:[type:"a"]],
  [key_1:[type:"ab"],key_2:[type:"ba"],key_3:[type:"aa"]],
  [key_1:[type:"a"],key_2:[type:"b"],key_3:[type:"ab"]]
  ]
print y.select("* WHEREIN type='a'");
axyz = [ A:[b:1], B:[b:2], C:[b:3, d:50], AA:[b:4] ]
print axyz.format("JSON")
x = axyz.array("id")
print x
print x.array("id")
/**

print axyz.select("A*,B").format("JSON")
print axyz.select("A*;B").format("JSON")
print axyz.select("(A*,B)").format("JSON")

print axyz.select("A* where C.d=50").format("JSON")
print axyz.select("A*; where C.d=50").format("JSON")
print axyz.select("(A*) where C.d=50").format("JSON")
print axyz.select("A* wherein b>2").format("JSON")
print axyz.select("A*; wherein b>2").format("JSON")
print axyz.select("(A*) wherein b>2").format("JSON")
xyz = [ [[a:1,b:11, c:[a:99]], [a:0,b:0]],[[[a:2,b:22]]],[[a:3,b:33,c:44]] ]





/**
 function loopTest() {
   var testList = [1,2,3];

   for (i in testList) {
     print "NO VAR: i=" + i;
   }
}

loopTest;

/**


var x = 1
a = [a:1,b:2]

for (var x in a)
  print x
print x

x = 1
for (x from [1,2,3])
  print x
print x


function renumber(atomInfos) {
   for (var atomId in atomInfos) {
     atomInfos[atomId]..seqNum *= 10;
   }
}

globalHash = [subsets: [subset1: [atomInfos: [atom1: [seqNum: 1],
                                               atom2: [seqNum: 2],
                                               atom3: [seqNum: 3]
                                              ]
                                  ],
                         subset2: {}
                        ]
              ];

filter = "[SELECT ** WHERE seqNum > 1]";
x = @globalHash;
globalHash..subsets..subset2..atomInfos = @{getProperty(globalHash..subsets..subset1..atomInfos, filter)};

renumber(globalHash..subsets..subset2..atomInfos);
print "====== Subset 2 ===========";
print globalHash..subsets..subset2..atomInfos;
print "====== Subset 1 ===========";
print globalHash..subsets..subset1..atomInfos

function localTest(atomInfos, subsetKey) {
   for (var atomId in atomInfos.keys) {

     print "LOCAL " + subsetKey  + " atomId is " + atomId

     var atomInfo = atomInfos[atomId];
     var seqNum   = atomInfo..seqNum;
     print "LOCALTEST: subsetKey=" + subsetKey + "  atomId=" + atomId + "  seqNum=" + seqNum;
   print atomInfo;
   }
}

for (var atomId in globalHash..subsets..subset2..atomInfos.keys) {
print "GLOBAL atomId is " + atomId
x = atomId
   var atomInfo = globalHash..subsets..subset2..atomInfos[atomId];
   var seqNum   = atomInfo..seqNum;

   localTest(globalHash..subsets..subset1..atomInfos, "subset1");

print "GLOBAL atomId should be " + x + " is " + atomId
   print "GLOBALLOOP: subsetKey=subset2  atomId=" + atomId + "  seqNum=" + seqNum;
   print atomInfo;
}

atomInfos = [a:1,b:2]
print "next for is GLOBAL"
for (var atomId in atomInfos) {
print "GLOBAL atomId is " + atomId
var x = atomId
print "next for is LOCAL"
   for (var atomId in atomInfos) {
     print "LOCALTEST: " + atomId
   }
print "GLOBAL atomId should be " + x + " is " + atomId
}




 for (i = 1; i <= 3; i++)
   print i;
  globalHash = [subsets: [subset1: [atomInfos: [atom1: [seqNum: 1], atom2: [seqNum: 2], atom3: [seqNum: 3, SNPs: ["snp1","snp2"]] ]], subset2: {}]]
 //globalHash = [ [ [ [2,3,4],5,6],7,8],9]
  
 function deepCopy(a) {
  switch (a.type) {
  case "hash":
    var b = {};
    for (var key in a)
      b[key] = deepCopy(a[key]);
    return b;
  case "array":
    var b = [];
    for (var j = a.length; j > 0; --j) 
      b[j] = deepCopy(a[j]);
    return b;
  default:
    return a;
  }
}

x = @globalHash
x.subsets.subset2 = x
print x.format("JSON");
print ""
y = @x
x.subsets.subset1.atomInfos.atom2.seqNum = x.subsets.subset2
print y.format("JSON")
z = @x
print ""
print z.format("JSON")
print "x is " + x.subsets.subset2.format("JSON")
print "globalhash  is " + globalHash.subsets.subset2.format("JSON")
/**
c = [3,4,5,6]

d = deepCopy(c);
print d


/**
load =1msy
isosurface "t.r3d" fullylit
select backbone
wireframe only
display not water

/**
y = "a\nc"
z = "b\\nd"
print y
print z
set echo top left
echo "b\nc"


/**

 load =1ehz/dssr
// select on hbonds
// print {selected}.count

x =  _M.dssr.hbonds.select("atom1_id;atom2_id where donAcc_type != 'questionable'")
select "|1|A|C|70|O4'|||"
select on @x
zoom {atomno < 6}
select off *
label %[unitid]\n 

y = "a\nc"
z = "b\\n"
print y
print z


/**


globalHash = [
  subsets: [
    subset1: [
      atomInfos: 
        [atom1: [seqNum: 1],atom2: [seqNum: 2],atom3: [seqNum: 3]]
    ],
    subset2: {},
    subset3: {}
  ]
];
a = globalHash..subsets..subset1..atomInfos;

/**

print a.select("atom1;atom2")


/**

print a.select("** where seqNum > 1")

x = a._("[SELECT ** WHERE seqNum > 1]");
print x
y = a._("[SELECT ; WHERE seqNum > 1]");
print y

z = a.select("** WHERE seqNum > 1");
print z

w = a.select("; WHERE seqNum > 1");
print w

/**
 load =1ehz/dssr
 select on hbonds
 print {selected}.count


 load =1ehz/dssr
//select on helices
select off *
set backbonesteps
backbone -0.3

/**
print "c1ccccc1".find("SMILES","C1=CC=CC=C1")
load DATA "model"
Ethane

http://www.ichemlabs.com
  2  1  0  0  0  0            999 v2000
   -0.4330   -0.2500    0.0000 C   0  0  0  0  0  0
    0.4330    0.2500    0.0000 C   0  0  0  0  0  0
  1  2  1  0     0  0
M  END "model" filter "2D"


/**
load =cod/1000002 {2 2 2} packed
polyhedra 3.0 unitcell {_Sr}[1] {_O}
select *
wireframe
spacefill 0.02
center @2
select on
background white
set testflag3

/**

t3.spt;//load tferro2.spt
polyhedron 6.5 {_Fe} {_C}

/**
 load tpoly2.spt
polyhedra delete
select @2
polyhedra 4.0
print {polyhedra}.polyhedra

/**
 load sf6.smol -1
wireframe off;spacefill off;
polyhedra bonds 
calculate symmetry polyhedra
print {polyhedra}.polyhedra.polySmiles
/**
load =1ehz/dssr1
calculate hbonds structure

cartoons only
select within(dssr,"hairpins")
color yellow
select within(dssr,"junctions")
color blue
write image clipboard
/**
rotate best
cartoons only
set cartoonladders
x = eval(load("1ehz.dssr.json"));
print x.keys

y = within(x.junctions)
color @y blue
select on within(dssr,"junctions") and _P

/**

y = within(x.hairpins.getProperty("[select nts_long]").join(","))
color @y yellow
select on within(dssr,"hairpinLoops")

/**
load 1ehz
xdssr = eval(load("1ehz.dssr.json"));
print xdssr.keys
/**
load quartz.cif
polyhedra 3.5  unitcell {_Si}  {_Si}

/**
try {
load t2b.spt
}
spacefill off
wireframe 
polyhedra
label
font label 20
set labelfront
{Cl6}.element = "Br"
{Cl6}.atomName = "Br6"
label
{Cl5}.element = "I"
{Cl5}.atomName = "I5"
label
{Cl4}.atomName = "F4"
{F4}.element = "F"
label
show smiles
print {*}.search("[Os@SP3](Br)(Cl)(I)F")
calculate symmetry polyhedra
print {polyhedra}.polyhedra.stereoSmiles

/**
 load $caffeine
polyhedra 1.5

/**
 load d4d.xyz

spacefill off;background white
set testflag3

//delete atomno > 6
//delete @2
select @1
//@1.xyz  = {_Cl}.xyz
polyhedra bonds collapsed faceCenterOffset 0.3
//polyhedra off
/**
background white
set debug
set testflag3
load ferro3.spt
polyhedra {_Fe} to {_C}
select on _Fe

/**
load tpoly.spt
polyhedra @2 to {visible}
/**
load sf6.smol -1
wireframe off;spacefill off;
polyhedra bonds 
/**
 *
load $C(Br)(Cl)F
color chlorine blue
polyhedra 4 bonds distancefactor 3.0
calculate symmetry polyhedra
print @1.polyhedra.stereoSmiles

/**
 *script t3t.spt

calculate symmetry polyhedra
print @1.polyhedra.stereoSmiles
print @1.polyhedra.smilesStereo
wireframe only
polyhedra on
label
connect {_H} {_H} single
x = @1.polyhedra.stereoSmiles
print {*}.find(x)
y = x.split("].")[2]
print y
set debug
  print {*}.find(y)



/**
 *

load $ethane
print {*}.find("C.C(1)");
load $ethene
print {*}.find("C.C=(1)");

calculate symmetry polyhedra
print @1.polyhedra.stereoSmiles
print @1.polyhedra.smilesStereo
wireframe only
polyhedra on
label
x = @1.polyhedra.smilesStereo
print {*}.find(x)
y = x.split("].")[2]
print y
print {*}.find(x)
set debug
print {*}.find(x)
print {*}.find(y)

/**
load sf6.smol 1 filter "novib"
 assign atom ({4}) "X"
  assign atom ({6}) "X"
select *
set debug 
polyhedra 4
calculate symmetry polyhedra
print {*}.polyhedra.smilesStereo
label %a
font labels 30
color labels black


/**
 *load caffeine.mol
select {C6}
polyhedra 4
calculate symmetry polyhedra
print {C6}.polyhedra.smilesStereo
select connected(C6)
label %a
/**

var aTest = "testing"

print [property_TEsting: atest ].property_TEsting
/**
print [noTest: atest]

print [aTest: aTest]

print [aTest: atest]

print [atest: aTest]
print [atest: atest]

/**

function hashTest(yA) {
   show yA;
}

function callHashTest1() {
   var firstParam  = "p1_b";
   var secondparam = "p2_b";

   print "  --- Brackets 1a (direct) ------";
   hashTest([firstParam: "p1_a", secondParam: "p2_a"]);
   print "\n  --- Brackets 1b (by variable) ------";
   hashTest([firstParam: firstParam, secondParam: secondParam]);

   print "\n  --- Braces 1a (direct) ------";
   hashTest({"firstParam": "p1_a", "secondParam": "p2_b"});
   print "\n  --- Braces 1b (by variable) ------";
   hashTest({"firstParam": firstParam, "secondParam": secondParam});
}

function callHashTest2() {
   print "  --- Brackets 2a (direct) ------";
   hashTest([firstParam: "p1_a", secondParam: "p2_a"]);
   print "\n  --- Braces 2a (direct) ------";
   hashTest({"firstParam": "p1_a", "secondParam": "p2_b"});
}

print "===== Function call from function 1 ======";
callHashTest1;
print "\n===== Function call from function 2 ======";
callHashTest2;

print "\n===== Direct function call ======";
firstParam  = "p1_b";
secondparam = "p2_b";
print "  --- Brackets 3a (direct) ------";
hashTest([firstParam: "p1_a", secondParam: "p2_a"]);
print "\n  --- Brackets 3b (by variable) ------";
hashTest([firstParam: firstParam, secondParam: secondParam]);
print "\n  --- Braces 3a (direct) ------";
hashTest({"firstParam": "p1_a", "secondParam": "p2_b"});
print "\n  --- Braces 3b (by variable) ------";
hashTest({"firstParam": firstParam, "secondParam": secondParam});



// load $caffeine
/**
x = load("cyclohexane_movie.xyz")
load var x 4
delay 1
x = load("quartz.cif")
load var x {1 1 1}

/**
load $caffeine
rotate x 30
background grey
write test.png as PNGJ
/**

for reference:

Jmol.script(jmolApplet0,"set hoverCallback 'myHover';hover off")
myHover = function(appletID,label,index){
  var app = Jmol._applets[appletID];
  var atom = app._applet.viewer.ms.at[index];
  var isAntialiased = app._applet.viewer.tm.antialias;
  var sx = atom.sX * (isAntialiased ? 0.5 : 1);
  var sy = atom.sY * (isAntialiased ? 0.5 : 1);
  var offset = $(app._canvas).offset();
  offset.top = Math.floor(offset.top + sy);
  offset.left = Math.floor(offset.left + sx);
  document.title = JSON.stringify(offset)
}

load c:/temp/HupA_2.pse

/**

x = [key_1:[type:"a"],key_2:[type:"b"],key_3:[type:"a"]]

z = x._(["SELECT ** WHERE type='a'"]);
show z;
/** 
 //load =1crn/val

load caffeine.xyz
print {*}._("bondInfo[Select atom1 where atom2.atomIndex=12 || atom1.atomIndex=12]")
print {*}._("bondInfo[Select ** where atomIndex=12]")
/**
select *
polyhedra 4
getproperty shapeinfo
x = getproperty("shapeinfo").Polyhedra
print x.format(["faceCount", "atomName"])

/**
 *select @11
polyhedra 4

/**
 *
 *
 *
  print "CCCC".find("SMARTS","CC").format("JSON")


 print "CCCC".find("SMILES","CCCC", false,false).format("JSON")
 print "CCCC".find("SMILES","CCCC", false,true).format("JSON")
 print "CCCC".find("SMARTS","CC", false,false).format("JSON")
 print "CCCC".find("SMARTS","CC", false,true).format("JSON")

 print "CCCC".find("SMILES","CCCC", true, false).format("JSON")	
 print "CCCC".find("SMILES","CCCC", true, true).format("JSON")
 print "CCCC".find("SMARTS","CC", true, false).format("JSON")
 print "CCCC".find("SMARTS","CC", true, true).format("JSON")

/**
load $caffeine

/**
function hashTest(yA) {
   show yA;
}

function callHashTest1() {
   var firstParam  = "p1_b";
   var secondparam = "p2_b";

   print "  --- Brackets 1a (direct) ------";
   hashTest([firstParam: "p1_a", secondParam: "p2_a"]);
   print "\n  --- Brackets 1b (by variable) ------";
   hashTest([firstParam: firstParam, secondParam: secondParam]);

   print "\n  --- Braces 1a (direct) ------";
   hashTest({"firstParam": "p1_a", "secondParam": "p2_b"});
   print "\n  --- Braces 1b (by variable) ------";
   hashTest({"firstParam": firstParam, "secondParam": secondParam});
}

function callHashTest2() {
   print "  --- Brackets 2a (direct) ------";
   hashTest([firstParam: "p1_a", secondParam: "p2_a"]);
   print "\n  --- Braces 2a (direct) ------";
   hashTest({"firstParam": "p1_a", "secondParam": "p2_b"});
}

print "===== Function call from function 1 ======";
callHashTest1;
print "\n===== Function call from function 2 ======";
callHashTest2;

print "\n===== Direct function call ======";
firstParam  = "p1_b";
secondparam = "p2_b";
print "  --- Brackets 3a (direct) ------";
hashTest([firstParam: "p1_a", secondParam: "p2_a"]);
print "\n  --- Brackets 3b (by variable) ------";
hashTest([firstParam: firstParam, secondParam: secondParam]);
print "\n  --- Braces 3a (direct) ------";
hashTest({"firstParam": "p1_a", "secondParam": "p2_b"});
print "\n  --- Braces 3b (by variable) ------";
hashTest({"firstParam": firstParam, "secondParam": secondParam});




/**
load tj.cif

/**
 *
 * networkDefinitions = {"networkType": "testing"}
function dotTest(dataHashref) {
  var nType       = dataHashref..networkType;
  var networkType = dataHashref..networkType;
  var n2Type      = dataHashref..networkType;
  print "nType=" + nType;
  print "networkType=" + networkType;
  print "n2Type=" + n2Type;
}
dotTest(networkDefinitions);

a  = {"b":"mytype","B":"MYTYPE"}

// having this next statement  is the problem
print "a.B is " + a.B
var B  = a["B"];
print "b is " + b
print "a.B is " + a.B

d = a.b;
print "d=" + d; // blank if b = a..B comes first
print "a is " + a
print "a..b is " + a..b
print "a.b is " + a.b
print "a.B is " + a.B
/**


load *1al4
z = {*}.label("-%[altloc]-\t%[resno]%a")
y = z.split("\t")
print y
/**
 load plot_example1.cif
/**
x = now();
load 1a4f_updated.cif
print now(x);

x = now();
load 1a4f.cif;
print now(x);

/**
load 1blu_updated.cif
/**
 load 1cbs_updated.cif
/**
load 1.cif
/**
load http://www.ebi.ac.uk/pdbe/static/entry/1hf4_updated.cif
/**
 *

load test.pdb

/**

load c:/temp/plot_example.cif
{*}.radius = {*}.atomindex.all.mul(0.1)
{*}.property_r = {*}.radius.all
write property x y z "test.pdb"
load test.pdb

/**
cd "c:/temp/indigo/model_new2015/model_builder/server-hidden"
main.spt
//set debugscript
function mm(model,type){
 print getOptionsXML(model,true,type)
 showstyle(type)
}

mm("methane","wo")

cd ""
//set debugscript false
/**
load $ethane
print {*}.find("smarts","[r5]")
/**
 */**
load ethene.mol
wireframe 0.1
spacefill 0.2
set multipleBondBananas true

/**
 *
print format("XXX%5.-5iXXX",33425)
print format("XXX%5.-5iXXX",1)
load 3w5v
write t.pdb
/**

//x = eval(load("http://aflowlib.duke.edu/users/egossett/phaseDiagramJSONGenerator/post_handler.php?POST?e1=Ag&e2=Au"))
//print x.phaseDiagramInfo.getProperty("[select * where composition..0 < 0.5]")



function aflowSimilarityCheck(file1, file2, range) {
//@file1 first model
//@file2 second model
//@range a range in Angstroms for polyhedron creation; default 3.65 Angstroms
// load two files and scale the second to the first based on polyhedra

  print "loading " + file1 + " and " + file2
  refresh
  
  load @file1
  load append @file2
  
  print "determining lasttice scaling using polyhedral SMILES"
  var latticeScaling = aflowGetLatticeScaling(0, range)
  print "lattice scaling is " + latticeScaling
  if (!latticeScaling)return
  print "reloading model 2 with this lattice scaling"
  zap {2.1}
  load append @file2 filter @{"latticeScaling="+(latticeScaling)}
  var aRet = []
  print "lattice scaling is now " + aflowGetLatticeScaling(0, range, aRet)
  var mat = aRet[2]
  print "Rotation/Translation matrix is  " + format("JSON", mat)
  return mat
}

function aflowGetLatticeScaling(atom1, range, aReturn) {
//@atom1 one or more atoms from the first model; default first atom
//@range a range in Angstroms for polyhedron creation; default 3.65 Angstroms
//@aReturn an array -- for return of the matching atomIndex, rotation/translation matrix, and RMSD, if desired
// with two files loaded, create a polyhedron for the 
// one atom in each file of the same element. 
// Using SMARTS, find the two matching polyhedra and determine their
// volumes. Then use that volume difference to reload the
// second model with scaling

  // default is first atom and a range of 3.65 angstroms
  
  if (!atom1) atom1 = {1.1}[1] 
  if(!range) range = 3.65
  
  // get all atoms in second model with same element
  
  var elem1= atom1.element
  atom1 = {1.1 and element=@elem1}[1]  
  var all2 = {2.1 and element=@elem1}  
  if (!all2.count) {
    prompt "element " + elem1 + " is not in the second model"
    return
  }
  
  // create polyhedra for atom1 and all similar atoms in second model
  // and generate their SMILES codes 

  select atom1 or all2

  print "calculating " + {selected}.count + " polyhedra"
  refresh

  polyhedra 4-24 @range unitcell translucent
  calculate symmetry polyhedra
  
  // do a SMILES comparison (exact match, including elements)

  var s1 = atom1.polyhedron.getProperty("SMILES")
  var like1 = polyhedra(s1) and {2.1}
  print "for " + atom1.label() + " SMILES="+s1 +"\n found " + format("JSON",like1.label())
  if (!like1.count) {
    prompt "no match for polyhedra in second model"
    return
  }

  print "comparing polyhedra using SMILES"
  refresh

  var coords1 = atom1.polyhedron.getProperty("vertices")
  var minRMSD = 1E6
  var minAtom, minCoords
  for (var atom2 in like1) {
    var s2 = atom2.polyhedron.getProperty("SMILES")
    var coords2 = atom2.polyhedron.getProperty("vertices")

    // re-order the coords2 to match atoms in coords1
    // because they may not be in the same order
    // Note that we are taking only the first possible match of (no doubt) several
    // You can set getFullList to TRUE if you want to see how many matches there are
    // It is possible that we really should check EVERY match, but I think that is
    // unlikely to be necessary. As is, this could match a rectangular prism incorrectly
    
    var getFullList = false;
    var map12 = s2.find("SMILES", s1, true, getFullList)
    if (getFullList) {
      print "" + map12.length + " orientations were found for atom " + atom2.label()  
      map12 = map12[1]
    }    
    var coords2Mapped = []
    for (var i in map12) coords2Mapped.push(coords2[i + 1])
    coords2 = coords2Mapped
    
    // get the best RMSD using a SMILES match to map coordinates
  
    var RMSD = compare(coords1, coords2, "stddev")
    print format("JSON",["RMSD", RMSD, atom1.label(), atom1.xyz, atom2.label(), atom2.xyz])
    if (RMSD.type == "decimal" && RMSD < minRMSD) {
      minRMSD = RMSD
      minAtom = atom2
      minCoords = coords2
    }
  }
  if (minRMSD == 1E6) {
    print "no match was found?? - there must be a bug in Jmol"
    return
  }

  // prepare final data
  if (aReturn.type == "array") {
    var minMatrix = compare(coords1, minCoords)
    aReturn.push(minAtom)
    aReturn.push(minMatrix)
    aReturn.push(minRMSD)
  }
      
  print "for " + atom1.label() + " match=" + minAtom.label() + " RMSD=" + minRMSD

  // get a volume comparison and return it

  var volumes = getProperty("shapeInfo.polyhedra[select volume]")
  return (volumes[1]/volumes[0])**0.333333
}

mat = aflowSimilarityCheck("C:/temp/aflow/david/POSCAR_Er1Fe2_ICSD_630450" "C:/temp/aflow/david/POSCAR_Er1Fe2_ICSD_169364")

if (mat) {
  select {1.1}
  color yellow
  rotateselected @mat
  frame *
select *
color property modelindex
background white
color polyhedra translucent 0.6
frame *
write PNGJ c:\temp\toDavid_poly2.png
load append C:/temp/aflow/david/POSCAR_Er1Fe2_ICSD_169364 {444 666 1}
select 3.1
wireframe only
select within(4,true,1.1 or 2.1)
wireframe 0.1
hide not selected
wireframe 0.03
set zshade false
frame *
write PNGJ c:\temp\toDavePoly3.png
}





/**
 *
 * load models {1 2 1} "C:/Users/RM/Downloads/D_0000000000_assembly-model_P1.cif.V1"
	
//load 1cdr_new.pdb

/**

script "c:/temp/brillouin.spt";zonedemo

/**

load "http://aflowlib.mems.duke.edu/users/jmolers/binary/AgCd.aflow_binary"


set debugscript


//x =_("aflowInfo").getProperty("[select Ca,Cb]")[0];
//show x
//x = getProperty("auxiliaryInfo.models.aflowInfo").getProperty("[select Ca,Cb where Ca > 0.5]")[0]
//show x
x= getProperty("auxiliaryInfo.models.aflowInfo[select Ca,Cb where Ca > 0.5]")
show x  
/**
//x = getProperty("auxiliaryInfo.models.aflowInfo[select Ca,Cb]")
//print getProperty("auxiliaryInfo.models.aflowInfo[select Ca]")

/**
 *
x = plane({0 0 0.5} {1 0 0.5} {0 1 0.5})
y = {0 0 -1}
z = {0 0 1}
z1 = {0 0 2}
print y.distance(x, z);
print z.distance(x, z);
print {0 0 0.5}.distance(x, z);

/**
//load "file:/C:/temp/aflow/binary/AgAu.aflow_binary" 
load "http://aflowlib.mems.duke.edu/users/jmolers/binary/AgCd.aflow_binary"

center visible
model align @1
//zoom 200    
//select @1
  polyhedra 4-24 3.65 unitcell translucent 0.2

print polyhedra(12).polyhedra.all.getProperty("[select modelNumber,pointGroup,element where atomName like 'Ag?']")

        print polyhedra(12).polyhedra.all.getProperty("[select modelNumber,pointGroup,element where pointGroup like 'D3h']")

quit
  
  print polyhedron(9)
   
  print polyhedron(9).polyhedron

x = polyhedra(12)
print x.count
y = x.model.all
frame @y
frame 1
s = x.polyhedron.getProperty("smarts")
print s
y = polyhedra(s)
print y.count
 
p = getproperty("shapeInfo.Polyhedra")
x= getproperty(p, "vertexCount")
if (x.length) print x.pivot
print "OK " + x.length
//print getProperty("shapeInfo.Polyhedra[select modelIndex where vertexCount=9]")

//x = within(4, true, "unitcell", {selected})
//print x;

m = _("aflowInfo[select modelNumber where Cb=0.5]").find("")
print m
print {model=m}.polyhedra.all.getProperty("[select pointgroup where modelNumber=32]")
/**

script "t.spt"
m = _("aflowInfo[select modelNumber where Cb=0.5]").find("")
print m
m2 = {model=m}.polyhedra.getProperty("[select pointgroup]")
print {model=m}.polyhedra.all.getProperty("[select pointgroup]").pivot
frame @{{model=m}.polyhedra.all.getProperty("[select modelNumber]")}
draw pointgroup polyhedra
print {model=m}.polyhedra.all.getProperty("[select pointgroup where modelNumber=32]")


load quartz.cif
set debug
polyhedra 4 @1 unitcell
set debug off
getproperty shapeinfo
s = getProperty("shapeInfo.polyhedra[1].smiles")
print s
polyhedra delete
load "" {1 1 1}
polyhedra 4 {*}
x = polyhedra(s);
print x
select on x;
/**
 t = getProperty("shapeInfo.polyhedra[1].smiles");
a = t.find("smarts",s)
select on atomno=a 

/**
x = 0
if (++x) {
print "good"
}
print "x should be 1 " + x

x = 0
if (x++) {
 print "bad"
}
print "x should be 1 " + x
x++
y = x++
print "x should be 3 " + x
print "y should be 2 " + y
x = 2
z = ++x
print "x should be 3 " + x
print "x should be 3 " + x
print "z should be 3 " + z

x = [1 2 3]
show x
x[2]++
show x
y= x[2]++
show x


/**


function fillPoly(AaBb, model, atomn) {
  select *
  polyhedra delete
  if (AaBb) {
    load @{"file:/C:/temp/aflow/binary/"+AaBb+".aflow_binary"} fill 20
  } 
  if (!atomn) {atomn = 1}
  print atomn
  var atom = {atomno=atomn}
  if (model) {
    model @model
  }
  center atom and 1.1
  model align @atom
  zoomto {atom and visible}
  select @atom
  polyhedra 4-24 3.65 unitcell translucent 0.2
}
print "fillPoly(AaBb model atomno)"

load "file:/C:/temp/aflow/binary/AgAu.aflow_binary" 179 fill 20
center @1 and 1.1
model align @1
zoom 200
select @1
polyhedra 4-24 3.65 unitcell translucent 0.2

p = getproperty("shapeInfo.Polyhedra")
x= getproperty("shapeInfo.Polyhedra.vertexCount")
if (x.length) print x.pivot
print "OK " + x.length
//print getProperty("shapeInfo.Polyhedra[select modelIndex where vertexCount=9]")

//x = within(4, true, "unitcell", {selected})
//print x;

/**
set pointGroupDistanceTolerance 0.3
draw width 0.2 points @{x["points"]} color red mesh nofill translucent
show pointgroup polyhedron

/**
   var SECONDparam = "p2_b";      
   x = [secondPARAM: "p2_a",myPARAM: "test2"]
   print x
/*
function callHashTest1() {
   var firstParam  = "p1_b";
   var SECONDparam = "p2_b";
      
   x = ["FIRSTParam": "p1_a", secondPARAM: "p2_a"]
   print x
   
}

callHashTest1

*/

set debugscript
set debug
   var firstPARAM  = "p1_b";
   var SECONDparam = "p2_b";
      
   x = ["FIRSTParam": "p1_a", secondPARAM: "p2_a"]
   print x
   
set debug off

   
/**
load "file:/C:/temp/aflow/binary/AgCd.aflow_binary" 20 //filter "ca=0.5;nopack"

select @1 & 1.1
polyhedra 4-16 3.7 unitcell

x = within(4, true, "unitcell", {selected})
print x;

set pointGroupDistanceTolerance 0.3
draw width 0.2 points @{x["points"]} color red mesh nofill translucent
show pointgroup polyhedron

/**
 *
model 22
select @1 and 1.22
polyhedra 12 unitcell

 
/**
load "" 1
select on atomno=6
polyhedra unitcell 12


/**


function checkmodel(n) {
 model @n
 x = "*12345.*6789%10.*%11%12%1384.*%14%15%16%17%18%19%11%20%21%22%105.*2%177%23%24.*%25%26%18%123.*%27%28%25%29%19.*1%28%16%30%23.*%31%32%20%139.*%33%34%31%35%22.*%156%34%36%24.*%35%32%29%26%21.*%27%14%33%36%30"
 y = {connected(12) and model=n}
 if (y) {
   print "model " + n + " has " + y.length + " atoms connected to 12 other atoms"
  }
 select off *
 wireframe off
 for (var i in y) {
  select none
  c = {i or connected(i)}
  center @i
  a = c.find(x, true)
  if (a) {
   print "model " + n + " found " + a.length + "\n" + a
   select on a
   wireframe
   return
  }
 }
}

set debug off
load "file:/C:/temp/aflow/binary/AgCd.aflow_binary" fill filter "ca=0.5"

wireframe off 
spacefill off

checkmodel 37
show pointgroup

/**
for (var j = 1; j < 42; j++) {
  checkmodel @j
  delay 0.1
}
/**


c = {@32 and 1.1}
p = {(@32 or connected(@32)) and 1.1}
select c
//polyhedra 12 
select on p
reset;center {6.1541 4.3321 2.166}; rotate z 108.26; rotate y 20.88; rotate z -110.19;
center c
wireframe 0.05 
label %a%i
//set debug
print p.find("smiles")
x = p.find("smiles","*")
print x
t = p.find("smarts", x)
print t

select on t

/**


load simon3.cif packed

/**

load simon2.cif packed

/**
 load PROJ.xyz
 centerAt ABSOLUTE 3.6 110 -9.5
 rotate x 100
 rotate y -4
 zoom 200
 DRAW plane1 (atomno=12161) (atomno=12159) (atomno=12162)(atomno=12160)
 color $plane1 [250,210,10] translucent 0.6

 DRAW line1 (atomno=12161) (atomno=12160)
 color $line1 [255,255,255]

 perspectivedepth = true
 write povray find022_pov

/**
 zap
  set echo ~test1 IMAGE "images/test1.jpg"
  set echo ~test1 15% 95%
  set echo ~test1 SCALE 0.4
  
  set echo ~test2 IMAGE "images/test2.jpg"
  set echo ~test2 50% 50%
  set echo ~test2 SCALE 0.3

/**
 t3.spt
polyhedra 12 @32

/**

set echo myecho IMAGE "c:/temp/tr.png"

zap
  set echo ~test1 IMAGE "images/test1.jpg"
  set echo ~test1 15% 95%
  set echo ~test1 SCALE 0.4
  
  set echo ~test2 IMAGE "images/test2.jpg"
  set echo ~test2 50% 50%
  set echo ~test2 SCALE 0.3

/**

load "file:/C:/temp/aflow/binary/AgCd.aflow_binary" fill filter "ca=0.5"

/**
load "file:/C:/temp/aflow/binary/AgCd.aflow_binary" fill filter "ca=0.5"

load caffeine.xyz;
select *;
label on;
background label yellow;
color label black;
set picking label;

/**
 *set debug

function loadOne(aabb, cb, i, addEcho, doappend) {
if (doappend) {
  load append @{"file:/C:/jmol-dev/bobtest/aflow/binary/"+aabb+".aflow_binary"} @i fill boundbox [{0 0 0} {10 0 0} {0 10 0} {0 0 10}] filter @{"cb=" + cb}
} else {  
  load @{"file:/C:/jmol-dev/bobtest/aflow/binary/"+aabb+".aflow_binary"} @i fill boundbox [{0 0 0} {10 0 0} {0 10 0} {0 0 10}] filter @{"cb=" + cb}
}
    var s = "Hf=" + getproperty("auxiliaryInfo.models[0].aflowInfo['Hf_atom [eV] (VASP)']")%3
model title @{aabb + " " + cb + " " + i + " " + s}
set echo off

if (addEcho) {
    set echo top right
    color echo white
    font echo 80
    echo @s
          set echo middle left
    color echo white
    font echo 80
    s = "Cb=" + cb
    echo @s
          set echo bottom right
    color echo white
    font echo 80
    s = "#" + i
    echo @s
    }
}

function writeAll(aabb, cb, n) {
  if (!n) {n = 1}  
    for (var i = 1; i <= n; i++) {
      try{
        loadOne(aabb, cb, n, true, false)
        write PNGJ @{aabb + "." + i + ".png"}
        delay 0.5
      }catch(e){
        return
      }
   }
}

writeAll('AuCo', 0.5)


/**
 *
 * function showme(a,b,c) {
  var x = "showme"
  print "c=" + (c ? format("json",c._arguments) : "<n/a>")
  print "_argCount = " + _argCount + "\nx = " + x
  print "_caller.x = " + _caller.x
  print "_caller.caller.x = " + _caller.caller.x
  print "_arguments = " + format("json", _arguments)
  print " "
}
var x = "scriptlevel"
var caller = {}
showme(1)

function show2() {
 var x = "show2"
 var caller = _caller
 showme(5,6,_caller,7,8,9)
}
show2(4)

/**
 *
 *
 *
 *
 * 
load "file:/C:/jmol-dev/bobtest/aflow/binary/AgCd.aflow_binary" fill boundbox [{0 0 0} {10 0 0} {0 10 0} {0 0 10}] filter "ca=0.5"

/**
   boundbox corners {0 0 0} {5 5 5}
  show boundbox
  load "file:/C:/jmol-dev/bobtest/aflow/binary/AgCd.aflow_binary" {2 2 2} packed filter "list=Hf_a"

/**

$ load "file:/C:/jmol-dev/bobtest/aflow/binary/AgCd.aflow_binary" fill boundbox [{0 0 0} {5 0 0} {0 5 0} {0 0 5}]   packed filter "ca=0.5"


load "file:/C:/jmol-dev/bobtest/aflow/binary/AgCd.aflow_binary" {2 2 2} packed filter "ca=0.5"

load "file:/C:/jmol-dev/bobtest/aflow/binary/AgCd.aflow_binary" {2 2 2} packed // filter "ca=0.5"


 print getProperty("auxiliaryInfo.models.aflowInfo['Hf_atom [eV] (VASP)']")
 
 print getProperty("auxiliaryInfo.models.aflowInfo[SELECT Cb,'Hf_atom [eV] (VASP)' WHERE Cb > 0.4 and Cb< 0.6]")
 
 
reset;center {-3.761777 3.3987017 -2.6459928}; rotate z -110.87; rotate y 75.1; rotate z 138.38; zoom 552.1; translate x -10.66; translate y 19.23;


/**
load radius.poscar

/**
set debug
load aflow/NbRh.aflow_binary


/**

load quartz.cif
set perspectiveDepth true
write POVRAY t.pov

/**

maxLevel = 5

function recTest(level) {
   print "level="+ level +" maxLevel=" + maxLevel + "\n";
   if (level < maxLevel) {
     print "recursing at level " + level+"\n";
     recTest(level + 1);
print "this is ok"
   } else {
     print "recursion finished at level " + level+"\n";
print "this should only run once"
   }
print "this is OK, too"
}
recTest(1);

/**

load $caffeine
set appendnew false
load append $tylenol
select *
set picking dragMolecule

/**

 set allowrotateselected
unbind "_dragAtom"         // was left+drag
unbind "_rotateSelected" // was alt+left+drag
bind "left+drag" _rotateSelected  // now left+drag


/**
    x = [key_1:[type:"a"],key_2:[type:"b"],key_3:[type:"a"],key_4:33]
    z = getProperty(x, "[SELECT ** WHERE type='b']");
  print format("JSON", z);


load "http://www.rcsb.org/pdb/files/2WEF.cif.gz"
color monomer

/**
    x = [key_1:[type:"a"],key_2:[type:"b"],key_3:[type:"a"],key_4:33]
    z = getProperty(x, "[SELECT ** WHERE type='a']");
  print format("JSON", z);
  

/**


  _atoms  :  ({59:69})
    _isres  :  true
    _path  :  "types_of_outliers"
    types  :  "bond_angles"
    units  :
    [
      |1|A|ARG|10||||
    ]
    value  :  1
   }

$ print getproperty(x,"[select * where types='bond_angles']")
  {
    _atoms  :  ({200:211})
    _isres  :  true
    _path  :  "types_of_outliers"
    types  :  "bond_angles"
    units  :
    [
      |1|A|TYR|29||||
    ]
    value  :  1
   }
  {
    _atoms  :  ({59:69})
    _isres  :  true
    _path  :  "types_of_outliers"
    types  :  "bond_angles"
    units  :
    [
      |1|A|ARG|10||||
    ]
    value  :  1
   }

$ print getproperty(x,"[select * where types='bond_angles']")
  {
    _atoms  :  ({200:211})
    _isres  :  true
    _path  :  "types_of_outliers"
    types  :  "bond_angles"
    units  :
    [
      |1|A|TYR|29||||
    ]
    value  :  1
   }
  {
    _atoms  :  ({59:69})
    _isres  :  true
    _path  :  "types_of_outliers"
    types  :  "bond_angles"
    units  :
    [
      |1|A|ARG|10||||
    ]
    value  :  1
   }

$ print x
  {
    _atoms  :  ({200:211})
    _isres  :  true
    _path  :  "types_of_outliers"
    types  :  "bond_angles"
    units  :
    [
      |1|A|TYR|29||||
    ]
    value  :  1
   }
  {
    _atoms  :  ({160:168})
    _isres  :  true
    _path  :  "types_of_outliers"
    types  :  "bond_lengths"
    units  :
    [
      |1|A|GLU|23||||
    ]
    value  :  1
   }
  {
    _atoms  :  ({59:69})
    _isres  :  true
    _path  :  "types_of_outliers"
    types  :  "bond_angles"
    units  :
    [
      |1|A|ARG|10||||
    ]
    value  :  1
   }
  {
    _atoms  :  ({166 167})
    _path  :  "bond_lengths"
    units  :
    [
      |1|A|GLU|23|CD|||
      |1|A|GLU|23|OE1|||
    ]
    value  :  -5.38
   }
  {
    _atoms  :  ({66 67 69})
    _path  :  "bond_angles"
    units  :
    [
      |1|A|ARG|10|NE|||
      |1|A|ARG|10|CZ|||
      |1|A|ARG|10|NH2|||
    ]
    value  :  -7.19
   }
  {
    _atoms  :  ({204:206})
    _path  :  "bond_angles"
    units  :
    [
      |1|A|TYR|29|CB|||
      |1|A|TYR|29|CG|||
      |1|A|TYR|29|CD1|||
    ]
    value  :  -7.83
   }

$ 
load t.cif
/**
 load c:/temp/t1.phonon
frame 3
vibration on

/**
load t2.cif
/**load t.cif {1 1 1}

/**

load c:/temp/toLaurent_nacl.png

/**
x = load("t.cif")
load inline @x
select atomindex < 10
show selected

/**

 fileCount = 5

for (var fileNumber=1; fileNumber<=fileCount; fileNumber++) {
  print fileNumber
}

for (var fileNumber from [1,fileCount]) {
  print fileNumber
}

function ltest(x) {
   for (var i in x.keys) {
     print "i=" + i;
   }
   print "finished";
}

function ltest2(x) {
   for (var i in x) {
     print "i=" + i;
   }
   print "finished";
}

x = [a:33]
print "hello"
ltest(x)
print "1"
ltest2(x)
print "2"
x = {}
print "3"
ltest(x)
print "4"
ltest2(x)
print "5"


var x = 1

for (var x in [a:33,b:55]){
print "i think " + x
}
print "x is " + x
 


/**
zap; load SYNC "file:///C:/temp/test/b2q_spdfgh.molden_orig";if (true && _loadScript == '' && defaultLoadScript == '' && _filetype == 'Pdb') {if ({(protein or nucleic)&*/1.1} && {*/1.1}[1].groupindex != {*/1.1}[0].groupindex){select protein or nucleic;cartoons only;}if ({visible}){color structure}else{wireframe -0.1};if (!{visible}){spacefill 23%};select *}
set debug
set loglevel 6
mo 1
/**

function stest(iMax, iterationCount, systemName) {
   var startTime = now();
   var counter = 0;
   for (j=1; j<=iterationCount; j++) {
     for (i=1; i<=iMax; i++) {
       counter++;
     }
   }
   var duration = now(startTime);
   print "" + systemName + ": Iterations=" + iterationCount + "; Loop
size=" + iMax + "; Counter=" + counter + "; Total time=" + duration + "
ms;  Time per iteration=" + (1.0 * duration / iterationCount) + " ms";
}

/**
function localTest() {
   var testa = [ [ ], [ [ ] , 22], 3];
     testa.[2].[1].push(55);
     testa.[1].push(556);
     testa.[2].[1].push(56);
   show testa;
}
localTest;

/**
 function localTest() {
   var testHash = {};
   var hashKeys = ["key1","key2"];
   var value = 0;
   for (var currentKey in hashKeys) {
     value++;
     if (testHash[currentKey].type != "hash") {
       testHash[currentKey] = {};
     }
     if (testHash[currentKey]..secondLevel.type != "array") {
       testHash[currentKey]..secondLevel = [];
     }
     testHash[currentKey]..secondLevel.push(value);
   }
   print testHash;
}
localTest;

/**
 *function localTest() {
   testHash = {};
   var hashKeys = ["key1","key2"];
   var value = 0;
   for (var currentKey in hashKeys) {
     value++;
     if (testHash[currentKey].type != "hash") {
       testHash[currentKey] = {};
     }
     if (testHash[currentKey]..secondLevel.type != "array") {
       testHash[currentKey]..secondLevel = [ ];
     }
    testHash[currentKey]..secondLevel.push(value);
   }
   show testHash;
}
localTest;


/**
testhash = {};
testhash["key1"] = {};
show testHash

/**

function localTest() {
    testhash = {};
print testhash["key1"].type

show testHash
testhash["key1"] = {};
show testHash
}
localTest;


   var testHash1  = {};
   for (var i=1; i<3; i++) {
     testHash1[i] = {"i": i};
   }
   print testHash1;


/**

networkDefinitions = {"networkType": "test"}
function dotTest(dataHashref) {
   var nType       = dataHashref..networkType;
   var networkType = dataHashref..networkType;
   var n2Type      = dataHashref..networkType;
   print "nType=" + nType;
   print "networkType=" + networkType;
   print "n2Type=" + n2Type;
}
dotTest(networkDefinitions);

/**
var y = 33
function a(){return 1}
x = [A:[1,2,3], a:[4,5,6], y:55] 
print x.a.[a()]
print x..a.[a()]
print x..a..[a()]
print x.a..[a()]
//print x.a()

print x..y

//x.a.push(6)

/**
load $caffeine
draw polygon [@5 @12 @7]
/** load 1u19.cif filter "bychain"

SwingController.showMenu = function (a,b,c){
alert(3)
Jmol._showMenuCallback&&Jmol._showMenuCallback(a,b,c);
alert(31)
xxxa = a
xxxp = p

a.tainted&&(a.container.html(a.toHTML()),a.tainted=!1,p.bindMenuActionCommands(a,!0));
alert(32)
a.setPosition();
alert(33)
a.container.hide().menu().menu("refresh").show();
alert(34)
a.visible=!0;
a.timestamp=System.currentTimeMillis();
alert(35)
a.dragBind(!0);
alert(36)
a.container.unbind("clickoutjsmol");
a.container.bind("clickoutjsmol mousemoveoutjsmol",function(){1E3<System.currentTimeMillis()-a.timestamp&&p.hideMenu(a)});
a.container.bind("contextmenu",function(){return!1})
alert(4)

}

/**
 load 1u19.pdb filter "biomolecule 2"
/**
load quartz.cif packed

polyhedra 4
polyhedra {*} edges
color polyhedra red blue


/**
 *
load http://chemapps.stolaf.edu/jmol/docs/examples-11/data/water-AM1.sparchive
{*}[2].xyz = {*}[3];
print {*}[2].xyz
x = [3 4 5]
x[1] = x[3]
print x
		

/**

{*}[2].x = zc[-1 2][2];
print {*}[2].xyz



 *load =2ptn
//isosurface plane {0 1 10} {1 0 10} {1 3 10}  molecular

  isosurface "2ptn-molecular_slice1.jvxl";
  
  /**
   *  load "c6h6.smol"
mo 1
mo titleformat "%F|Orbital %I|Sym %S|Occ %O"
write IMAGE 556 492 PNG test.png
/**
isosurface plus th.jvxl
/**
load 1crn.pdb
write quaternion "q.pdb"

/**
load $caffeine
connect @4 @15 hbond
minimize

/**
show image "c:/temp/t.bmp"
show image "c:/temp/pic.bmp"
show image "c:/temp/tt.bmp"

/**
load 1vif.pdb filter "biomolecule 1;*.CA,*.P"

/**
load "https://www.dropbox.com/sh/ma70sia6zz7oa11/AAB5WEr-w19aewvGwtDqn_vha/Pseudomonas-pilus-PubMed15100690.pdb?dl=1"
rotate x -90
hide all
isosurface set 1 cavity
slab 51
depth 0
slab on
axes

/**


//set pdbaddhydrogens
load 1crn.pdb
//display arg
//label %a
//zoom @448 300
mutate arg ala
select *
cartoons only;color structure

/**
load caffeine.xyz
load append caffeine.xyz
select 2.1
rotateselected  x 30
rotateselected  y 45
translate selected {3 2 1}
m = compare({2.1},{1.1})
print m
rotate selected internal @m
stars -0.4
frame *

/**
set pdbaddhydrogens
load 1crn.pdb
//display arg
//label %a
//zoom @448 300
mutate {1} gly
display 1,2,3
reset;center {7.1088023 9.142717 -1.2974684}; rotate z 154.39; rotate y 39.55; rotate z -145.3; zoom 150.0;

//mutate {1-3} ala
//mutate {1-3} leu
/**
load cyclohexane_movie.xyz
frame align {atomno=3} fixed
center {atomno=3}
frame *

/**

RDC work

set meshScale 2
set zshade
set zshadepower 4
a = 3
b = -2
f =  "a*x*x + b*y*y + (-a-b)*z*z"
isosurface sphere 1.0 map contours 30  functionxyz = @f

set zshade off
isosurface resolution 20 sphere 1.0 map contours discrete [-.6] functionxyz = @f

/**


set pdbaddhydrogens
load 1crn.pdb
display arg
label %a
zoom @448 300
/**
mutate {1-3} gly
mutate {1-3} ala
mutate {1-3} leu
/**
load trajectory t.xyz
load append t.xyz

/**
	load caffeine.xyz

cgo test1a [ UVMAP @1 @6 @11 0 0 80 80 1 1
 BEGIN LINE_LOOP
 VERTEX 0 0 
 VERTEX 80 0
 VERTEX 80 80
 VERTEX 0 80
 END
]

/**
set perspectivedepth false
load c:\temp\nbo6\ch3nh2.37
nbo 5
rotate plane @1 @2 @3
set echo myecho image "c:/temp/t.png"
set echo myecho depth 50
set echo myecho [0 100]
/**

 draw @{point(point(_width, 0, {C4}.sz),false)}  @{point(point(_width, _height, {C4}.sz),false)}  @{point(point(0, _height, {C4}.sz),false)}  @{point(point(0, 0, {C4}.sz),false)}

load input::c:/temp/nbo/jmol_confile.txt


/**
  function test(i) {
	set echo top left
	echo @i
	isosurface slab none
	isosurface cap plane {1 1 1 1} @i;
	refresh	
}

//background white

load 1crn.pdb
rotate y 60
rotate y -120
isosurface s1 vdw;
display none
center $s1
//	set debug
//isosurface cap plane {1 1 1 1} 8

set antialiasdisplay


for (var i = -2	; i < 58; i++){test(i)}

//capture


/**

isosurface pmesh "t.pmesh"
/**
load 1crn.pdb
isosurface vdw map property temperature

/**
isosurface pmesh "t2.pmesh"
/**

load caffeine.xyz
isosurface molecular
isosurface slab off cap plane {1 1 1 1}

/**
load caffeine.xyz
isosurface molecular
isosurface slab off slab plane {1 1 1 1}

isosurface sphere 5.0;isosurface slab off cap plane {1 1 1 1} -2	


/**
 *
load c6h6.smol
mo homo
mo translucent

/**
 

isosurface s2 plane xy map vdw

isosurface sphere 5.0;isosurface slab off cap plane {1 1 1 1} -2	

/**

load caffeine.xyz
isosurface molecular
isosurface slab off cap plane {1 1 1 1}

/**
 *

load caffeine.xyz
isosurface molecular
isosurface slab off cap plane {1 1 1 1}

/**
 *
 * //t4.spt

load 1crn.pdb
isosurface vdw
isosurface cap plane xy

/**
load 1crn.pdb
isosurface sasurface
isosurface cap plane xy // edge 0.01 cycles
display none
set perspectivedepth false
/**
edge 0.1
red 400
and 15069 
$ draw $isosurface1[15101]
$ draw $isosurface1[15207]
$ draw $isosurface1[15070]
 
draw red400/* 15070 15206 15071 */{11.250947, 7.042796, 0.0}{12.277234, 8.169924, 0.0}{11.462508, 7.3171325, 0.0} color red
draw white230/* 15071 15070 15187 */{11.462508, 7.3171325, 0.0}{11.250947, 7.042796, 0.0}{15.390689, 11.428847, 0.0}
draw a {11.250947, 7.042796, 0.0} color white
draw pt {12.277234, 8.169924, 0.0}
center $a
/**
load caffeine.xyz
isosurface molecular
isosurface slab off cap plane {1 1 1 1}


/**
isosurface sphere 5.0;isosurface slab off cap plane {1 1 1 1} -2	

/**
load caffeine.xyz
isosurface molecular
isosurface slab off cap plane {1 1 1 1}


/**
load 1crn.pdb
isosurface vdw
isosurface cap plane xy

/**

isosurface sphere 5.0;isosurface slab off cap plane {1 1 1 1} -2	

/**
load 1crn.pdb
isosurface vdw
isosurface cap plane xy

/**
isosurface sphere 5.0
isosurface slab off cap plane {1 1 1 1}

/**
load 1crn.pdb
isosurface vdw
isosurface cap plane xy

/**

load caffeine.xyz
isosurface molecular
isosurface slab off cap plane {1 1 1 1}

/**
isosurface sphere 5.0
isosurface slab off cap plane {1 1 1 1}

/**

load C:\jmol-dev\workspace\Jmol-datafiles\gennbo\allyl.out

/**
load C:\jmol-dev\workspace\Jmol-datafiles\gennbo\allyl.31

/**

capture "c:/temp/toFrank-anim" loop
load c:/temp/nbo6/ch3nh2.47
reset;center {0.026154995 0.288375 0.0}; rotate z -2.22; rotate y 42.75; rotate z 6.56;
nbo type nbo
mo 3
refresh
nbo 3
nbo cutoff 0.3
for (var i = 0; i < 2; i+= 0.1) {
	nbo plane {C1} {N2} @i
  refresh
}
capture


/**


zap

cgo test3 [
 BEGIN POINTS   
 COLOR 255 0 0  
 LINE 0 0  0 0 0 2 2 2
 COLOR 0 255 0
 LINE 0 0  2 2 2 3 2 0
 END
]


/**

zap
cgo test1a [
 BEGIN LINES
 VERTEX 0 0 0 VERTEX 2 2 2
 VERTEX 2 2 2 VERTEX 3 2 0  
 END
]

cgo test1b [
 BEGIN LINE_LOOP
 DIAMETER 0.3
 VERTEX 4 0 0  
 VERTEX 6 2 2  
 VERTEX 5 2 0  
 END
]

cgo test1c [
 BEGIN LINE_STRIP
 VERTEX 4 0 0  
 VERTEX 6 2 2  
 VERTEX 5 2 0  
 END
]

cgo test2 [
 BEGIN POINTS
 COLOR 255 0 0  
 LINE 0 0  3 0 0 3 2 2 
 COLOR 0 255 0  
 LINE 0 0  3 2 2 4 2 0 
 END
]



/**


load 1crn.pdb
load append caffeine.xyz

/**

zap; load SYNC "file:///C:/temp/nbo6/ch3nh2.47";if (true && _loadScript == '' && defaultLoadScript == '' && _filetype == 'Pdb') {if ({(protein or nucleic)&*/1.1} && {*/1.1}[1].groupindex != {*/1.1}[0].groupindex){select protein or nucleic;cartoons only;}if ({visible}){color structure}else{wireframe -0.1};if (!{visible}){spacefill 23%};select *}
nbo type nbo

/**
load files "=1qo2" "=1thf"
cartoons only;color structure
frame *

select {1.1}

rotateselected [[ 0.8034720298   0.2078260117  -0.5578898154 42.0][-0.2191039598  -0.7680942401  -0.6016848786 47.4][-0.5535577224   0.6056728385  -0.5716067360 27.8][0 0 0 1]] 


/**
save coordinates c1

rotateselected [[ 0.8034720298   0.2078260117  -0.5578898154][-0.2191039598  -0.7680942401  -0.6016848786][-0.5535577224   0.6056728385  -0.5716067360]] 


rotateselected [[ 0.8034720298   0.2078260117  -0.5578898154][-0.2191039598  -0.7680942401  -0.6016848786][-0.5535577224   0.6056728385  -0.5716067360]] 


/**

translate {42.0 47.4 27.8}

restore coordinates c1


rotateselected [[ 0.8034720298   0.2078260117  -0.5578898154 42.0][-0.2191039598  -0.7680942401  -0.6016848786 47.4][-0.5535577224   0.6056728385  -0.5716067360 27.8][0 0 0 1]] 

/**

[
  [0.80347204	0.20782594	-0.5578898	0.0]
  [-0.21910393	-0.7680943	-0.60168475	0.0]
  [-0.55355775	0.6056727	-0.5716068	0.0]
  [0.0	0.0	0.0	1.0] ]

4.18 1.199 40.514 --> -19.99 -26.21 -24.75 --> 23 21 3



[
  [0.803472	0.20782599	-0.55788976	42.0]
  [-0.21910398	-0.7680942	-0.60168487	47.4]
  [-0.5535577	0.60567284	-0.57160676	27.8]
  [0.0	0.0	0.0	1.0] ]


load c:/temp/1crn.mol2
/**
load files "1crn.pdb" "1blu.pdb"
/**
load 1d66.pdb filter "[HOH]"

/**
 *load t.ts filter "TSTYPE=CG"
/**

x = '1,2,3,"test'.split("",true)
print x

/**



load caffeine.xyz
x = "1\n2\n3\n".lines
data "myd @x"	
label %{myd}
model 1 property "mydata" @x
{*}.property_n = data("mydata")

/**
test 1
and  3
now  4
end "myd"
//print load("c:/temp/t.csv").split("", true)

/**
set debug
load c:/temp/ssg/for_bob/t.cif {1 2 1} packed
spacefill off

/**

load c:/temp/nbo6/test.gau

/**
isosurface plane {1 0 -1 4} contour 51 -20 functionXY = "x * y"
/**
load c:/temp/t.dat
isosurface cutoff 0.1 lattice {2 2 1} unitcell -0.2 "c:/temp/t.dat"
// isosurface s2 color red cutoff 0.1 "c:/temp/t.dat" 
//isosurface slab within 3 {atomno=3}
//isosurface cache
//write t4.jvxl
//isosurface t4.jvxl//isosurface  gridpoints within 1 {atomno=3} "c:/temp/t.dat" triangles

/**
load 1crn.pdb
isosurface vdw map property temperature
write t.gif
/**
load c2h4.chgcar
isosurface "c2h4.chgcar"
/**
load nacl.chgcar
isosurface "nacl.chgcar"

/**
load c2h4.chgcar
/**
set pdbaddhydrogens
load =1eve
display ligand
/**
zap
/*
t3.spt;
//load caffeine.xyz
//color property atomno
t = now();
write image/t.gif
print now(t);

//anim fps 1
//capture "image/t.gif" LOOP;refresh;for(var i = 1; i < 10; i++){rotate x 10;refresh};capture

/**

/**
capture "image/t.png" -1;refresh;for(var i = 1; i < 10; i++){rotate x 10;refresh}

/**
load 1crn.pdb
cartoons only
set cartoonfancy
color amino
/**
t3.spt
write t3.gif
/**
load ==cys
rotate y 90
color carbon black
background orange
reset;center {0.16199994 -0.04000002 0.020500064}; rotate y 90.0; zoom 326.75; translate x -14.31; translate y 11.32;
write t.gif

/**
load "leg_U.m50"

/**

/**
load "C:/temp/jana2006/t03b.cif"
spacefill -0.1
color blue
load append "c:/temp/jana2006/t3.cif" {20 1 1} packed
select 2.1
stars -0.4
color yellow

/**
 
load "C:/temp/jana2006/t03.cif"
spacefill -0.1
color blue
load append "t3.cif" {3 3 3} packed
select 2.1
stars -0.4
color yellow
/**
load "t3.cif" {20 1 1} packed 0.5
connect {_Mn} {_Mn} delete
set echo top right;
capture "occ.gif" 120
for (var i = 0; i <= 100; i++) {
 var f = i/100.
 var t = "t=" + f 
 modulation @f
 {*}.occupancy = {*}.modulation("O",f);display  _Mn and occupancy > 0;polyhedra bonds {_Mn} collapsed;
 echo @t
 refresh;
}
capture
 
/**
load "C:/temp/jana2006/t03.cif"
spacefill -0.1
color blue
load append "t3.cif" {3 3 3} packed
select 2.1
stars -0.4
color yellow
/**
load "C:/temp/jana2006/t03.cif"
spacefill -0.1
color blue
load append "C:/temp/jana2006/t3.cif" {1 1 1}
select 2.1
stars -0.4
color yellow
display remove not _Ce

/**
 *load "C:/temp/jana2006/t03d.cif"
spacefill -0.1
color blue
load append "C:/temp/jana2006/t03e.cif"
select 2.1
color green
spacefill -0.1
load append "C:/temp/jana2006/t03f.cif"
select 3.1
color aqua
spacefill -0.1

load append "C:/temp/jana2006/t3d.cif" {1 1 1}
select 4.1
color blue
stars -0.4

load append "C:/temp/jana2006/t3e.cif" {1 1 1}
select 5.1
color green
stars -0.4

load append "C:/temp/jana2006/t3f.cif" {1 1 1}
select 6.1
color aqua
stars -0.4

display remove not _Mn
frame *

/**

load "C:/temp/jana2006/t03d.cif"
spacefill -0.1
color blue
load append "C:/temp/jana2006/t3d.cif" {1 1 1}
select 2.1
color yellow
stars -0.4
display remove not _Mn
frame *

/**
load "C:/temp/jana2006/t03b.cif"
spacefill -0.1
color blue
load append "C:/temp/jana2006/t03c.cif"
select 2.1
color green
spacefill -0.1
load append "C:/temp/jana2006/t3b.cif" {1 1 1}
select 3.1
color yellow
stars -0.4

display remove not _Mn
frame *

/**
load "C:/temp/jana2006/t03b.cif"
spacefill -0.1
color blue
load append "C:/temp/jana2006/t3b.cif" {1 1 1}
select 2.1
color yellow
stars -0.4
display remove not _Mn
frame *

/**
load "C:/temp/jana2006/t03.cif"
stars -0.4
color blue
load append "C:/temp/jana2006/t3.cif" {3 3 3}
select 2.1
spacefill -0.1
color yellow

/**
load "C:/temp/jana2006/t03.cif"
stars -0.4
color blue
load append "t1.cif" {3 3 3}
select 2.1
spacefill -0.1
color yellow

/**
 *
//set loglevel 6;
load  "t1.cif" {20 1 1} packed 0.5 filter "modT=11/17"
connect {_Mn} {_Mn} delete
display remove not _Mn and not connected(_Mn)
polyhedra bonds 4 {_Mn}

/**
load task1_1.cgd 

/**

load =1hho
isosurface select {ligand} only molecular

/**

 /*
load cdso4.cgd {444 666 1}
select c1
spacefill 1.0
select c2
spacefill 1.0
select c3
spacefill 1.0
select c4
spacefill 1.5
select c5
spacefill 2.0
color {*} yellow
select *
wireframe 0.6
reset;center {23.491001 23.13775 32.788998}; rotate z -14.05; rotate y 0.41; zoom 69.25;
*/

load coi.cgd packed 0.5
axes position [50 50]
axes scale 0.5
reset
background white
set antialiasdisplay
reset;center {5.0 5.0 5.405}; rotate z 45.32; rotate y 3.58; rotate z -45.29;
//load ten.cgd packed 0.4
wireframe -0.1
//reset;center {4.6379995 5.0 5.0}; rotate z 29.84; rotate y 3.39; rotate z -29.88;
//spacefill 0.3

//load t.cgd {4 4 4} packed

//load cds.cgd {2 2 2} packed

/**
load quartz.cif packed
print {*}.find("CellFormula",true);
print {*}.find("MF", "SiO2")

/**
 load 1.34.cif {1 1 1} packed

/**
 *
 * //load $caffeine

load t.pngj

//load $caffeine
//calculate partialcharge
//load async caffeine.xyz
//minimize;
/**
load 1crn.pdb;
cartoons only;
set cartoonRockets;

/**
load =1d66/dssr

/**
load *1s72/rna3d

/**

load caffeine.xyz

/**
 *
 * //isosurface c:/temp/2.mrc //
isosurface "http://www.ccpem.ac.uk/jsmol_test/data/1akeA_10A.mrc"

/**
 y = 1
function x {
   var y = 3
    print "before 3=" + y
throw context test	
    try {
	y = 5
	print "trying 5=" + y
    }
    catch {
	y = 6
	print "catching 6=" + y
    }
    print "after catch y=" + y
}

print "before x()1="+y
x()
print "after x()1="+y


/**
load t1.cif {20 2 5}
connect {_Mn} {_Mn} delete
connect {_Se} {_Se} delete
delete _O
delete fy >= 1.99 or fy <= 0.01
polyhedra 4 {_Mn} collapsed

/**

zap
print _version
set appendNew false
x1 ="data \"append a\"\nATOM      1  N   GLY A   1       0.000   0.000   0.000\nend \"append a\""
x2 ="data \"append a\"\nATOM      2  CA  GLY A   1       0.200   1.174   0.911\nend \"append a\""
x3 ="data \"append a\"\nATOM      3  C   GLY A   1      -1.110   1.668   1.425\nend \"append a\""
x4 ="data \"append a\"\nATOM      4  O   GLY A   1      -1.320   1.693   2.620\nend \"append a\""
script inline @x1
script inline @x2
script inline @x3
script inline @x4
connect
cpk 100
dots on
delete @2
script inline @x2
connect
cpk 100
select @2
print "before"
translate selected {1 1 1}
quit
print "after"
/**
load c:/temp/tn.molden {1 1 1}
/**
load SYNC "file:///C:/temp/magndata/skyrmion1.mcif" {1 1 1} packed supercell "-10b,10a + 10b,c"
/**	
unitcell offset {0 15 0}
unitcell "reset"
unitcell "-10b,10a + 10b,c"
display cell=555
background white
vector max 2;
vector 0.17
select *


/**
load SYNC "file:///C:/temp/magndata/skyrmion1.mcif" {30, 30, 1} packed
unitcell offset {0 15 0}
unitcell "reset"
unitcell "-10b,10a + 10b,c"
display cell=555
background white
select *


/**
 
//load SYNC "file:///C:/temp/magndata/skyrmion1.mcif" {10, 30, 1} packed
load SYNC "data/skyrmion1.mcif" {10, 30, 1} packed
unitcell offset {0 15 0}
unitcell "reset"
unitcell "-10b,10a + 10b,c"
display cell=555
background white
select *
color red
rotate y 180
vector 0.17
axes off
unitcell off
spacefill 0.35
vector max 1.6
zoom 200
//write PNGJ c:\temp\toManu_skyr-2.png

/**

load c:/temp/ssg/bcs/site/mag/mcif/1.22.cif packed

/**
load c:/temp/tn.molden {1 1 1}
/**
load mag_inc.cif {1 1 5} packed;rotate y 90
vector max 3.0
unitcell {0 0 2}
/**
capture "mag_inc_t.gif" 5
  for (i = 1; i < 100; i++){modulation @i;color property modx; color {not (cell = 555)} translucent 0.5;delay 0.5}

/**

load t07.cif


//set pdbaddhydrogens
load *1d66/val
select on within(validation,"bond_angles where value>5")
label %[validation.bond_angles]

//set hoverlabel "@{getProperty(\"validationInfo[select value where _type='clashes' and //(_atoms and {hovered})]\")}"

/**
load *1d66/dom
select on within(domains,"GO")

/**
load t.spartan
/**

load *2x9t/val
color property_rsrz "bwr"  
display group within(5, property_rsrz > 8)
set hoverlabel "@{getProperty(\"validationInfo[select value where _type='clashes' and (_atoms and {hovered})]\")}"

/**
load *1cbs/ann

/**

//getproperty validationInfo
//print getProperty("validationInfo[select where _type='clashes']")

/**
load 1cdr.cif

/**
set pdbaddhydrogens
load *1d66/val

/**

load *1cbs/ann
/**
/**x = {
    "1cbs": {
        "bond_angles": {},
        "chirals": {},
        "rsrz": {},
        "symm_clashes": {},
        "RNA_suite": {},
        "clashes": {
            "outliers": [
                {
                    "units": [
                        "|1|A|LEU|100|CD2|||",
                        "|1|A|LYS|82|HG2|||"
                    ],
                    "value": 0.59
                },
                {
                    "units": [
                        "|1|A|LYS|82|HG2|||",
                        "|1|A|LEU|100|HD21|||"
                    ],
                    "value": 0.87
                },
                {
                    "units": [
                        "|1|A|REA|200|C8|||",
                        "|1|A|REA|200|H181|||"
                    ],
                    "value": 0.51
                },
                {
                    "units": [
                        "|1|A|REA|200|H8|||",
                        "|1|A|REA|200|H181|||"
                    ],
                    "value": 0.61
                },
                {
                    "units": [
                        "|1|A|VAL|76|HG23|||",
                        "|1|A|HOH|310|O|||"
                    ],
                    "value": 0.46
                },
                {
                    "units": [
                        "|1|A|LEU|113|HD12|||",
                        "|1|A|PRO|1|HB2|||"
                    ],
                    "value": 0.47
                },
                {
                    "units": [
                        "|1|A|CYS|95|SG|||",
                        "|1|A|SER|83|HB3|||"
                    ],
                    "value": 0.44
                },
                {
                    "units": [
                        "|1|A|ARG|29|NH2|||",
                        "|1|A|HOH|387|O|||"
                    ],
                    "value": 0.45
                },
                {
                    "units": [
                        "|1|A|THR|110|HG22|||",
                        "|1|A|VAL|94|HG22|||"
                    ],
                    "value": 0.41
                }
            ]
        },
        "bond_lengths": {},
        "RNA_pucker": {},
        "planes": {},
        "sidechains": {
            "outliers": [
                {
                    "units": [
                        "|1|A|ASN|14||||"
                    ]
                },
                {
                    "units": [
                        "|1|A|MET|27||||"
                    ]
                },
                {
                    "units": [
                        "|1|A|ASP|127||||"
                    ]
                }
            ]
        },
        "rama": {},
        "types_of_outliers": [
            {
                "units": [
                    "|1|A|MET|27||||"
                ],
                "types": [
                    "sidechains"
                ],
                "value": 1
            },
            {
                "units": [
                    "|1|A|LYS|82||||"
                ],
                "types": [
                    "clashes"
                ],
                "value": 1
            },
            {
                "units": [
                    "|1|A|ASN|14||||"
                ],
                "types": [
                    "sidechains"
                ],
                "value": 1
            },
            {
                "units": [
                    "|1|A|SER|83||||"
                ],
                "types": [
                    "clashes"
                ],
                "value": 1
            },
            {
                "units": [
                    "|1|A|VAL|76||||"
                ],
                "types": [
                    "clashes"
                ],
                "value": 1
            },
            {
                "units": [
                    "|1|A|ASP|127||||"
                ],
                "types": [
                    "sidechains"
                ],
                "value": 1
            },
            {
                "units": [
                    "|1|A|ARG|29||||"
                ],
                "types": [
                    "clashes"
                ],
                "value": 1
            },
            {
                "units": [
                    "|1|A|CYS|95||||"
                ],
                "types": [
                    "clashes"
                ],
                "value": 1
            },
            {
                "units": [
                    "|1|A|VAL|94||||"
                ],
                "types": [
                    "clashes"
                ],
                "value": 1
            },
            {
                "units": [
                    "|1|A|HOH|387||||"
                ],
                "types": [
                    "clashes"
                ],
                "value": 1
            },
            {
                "units": [
                    "|1|A|THR|110||||"
                ],
                "types": [
                    "clashes"
                ],
                "value": 1
            },
            {
                "units": [
                    "|1|A|REA|200||||"
                ],
                "types": [
                    "clashes"
                ],
                "value": 1
            },
            {
                "units": [
                    "|1|A|LEU|100||||"
                ],
                "types": [
                    "clashes"
                ],
                "value": 1
            },
            {
                "units": [
                    "|1|A|HOH|310||||"
                ],
                "types": [
                    "clashes"
                ],
                "value": 1
            },
            {
                "units": [
                    "|1|A|PRO|1||||"
                ],
                "types": [
                    "clashes"
                ],
                "value": 1
            },
            {
                "units": [
                    "|1|A|LEU|113||||"
                ],
                "types": [
                    "clashes"
                ],
                "value": 1
            }
        ]
    }
}

print x

/**

load *1cbs/ann
/**
load *1cbs/val
show validation

/**

load *2x9t/val

/**

set pdbaddhydrogens
//load *1cbs/all //.cif + 1cbs.json
//x = eval(load("1cbs.json"))
x = getProperty("auxiliaryInfo.models[1].annotations")
print x..1cbs.keys 
 select * or within(annotations,"*")
 print "OK"
 /**set debug off
 	load *1cbs/all
 set debug
 set debugscript
 

/**
 *
 * problems:
 * 
$ 

x = getProperty("auxiliaryInfo.models[1].annotations.['1cbs']")
$ print x.keys
1cbs

 
$ x = getProperty("auxiliaryInfo.models[1].annotations")['1cbs']

   
 *  //select within(annotations,"tesing")
 // x = eval(load("c:/temp/1otz.json"))
 //y = x["1otz"].InterPro
 //CATH["2.60.120.40"]
//print y.keys
 
 load *1cbs/all
 print getProperty("auxiliaryInfo.models[1]").annotations["1cbs"].InterPro.keys
 x = getProperty("auxiliaryInfo.models[1]").annotations["1cbs"].InterPro.IPR012674
 select within(annotations,"InterPro.* where identifier like '*-like'")
 select within(annotations,"InterPro.* where identifier='calycin'")
 print x.mappings.length
 
 print getProperty(x,"[select identifier where mappings[1]['end'].residue_number - mappings[1]['start'].residue_number > 30]")
 
 select within(annotations,"InterPro.* where mappings[1]['end'].residue_number - mappings[1]['start'].residue_number < 100")
  
/**

 
/**
x = [2,3,4]
x = {"testing":"here","now":"then"}
for (i in x){print i + " = " + x[i]}

  load $caffeine;

moveto 1.0 { 916 -393 -75 38.89} 65.75 0.0 0.0 {-0.45 0.19 -0.065} 5.5 {0 0 0} 0 0 0 3 0 0;
background blue
move 90 0 0 0 0 0 0 0 5 30; // 90 degrees around X
background red
refresh
moveto 1.0 { 916 -393 -75 38.89} 65.75 0.0 0.0 {-0.45 0.19 -0.065} 5.5 {0 0 0} 0 0 0 3 0 0;
background orange
refresh
zoomto 1 *0.5;
background white

/**

load =1xv6
getproperty polymerinfo
/**
//set debug
//LoAd "C:/temp/downloads/Cu1x1_C1x1_hex_pbe_TS.geom"
load trajectory c:/temp/t.castep {1 1 1}
//load c:/temp/t.castep {444 666 1}
/**
load d_orbitals.jvxl;select hydrogen; spacefill off;set axesMolecular;axes on;
//moveto 1.0 52 -992 -114 36.0;
//isosurface delete dxy phase "xy" "" 1;show isosurface
isosurface delete dyz phase "yz" "" 2;show isosurface


/**

load "file:///C:/temp/ssg/bcs/site/mag/png/1.69.png|1.69.CoO.mcif" packed

/**

draw polygon 7 {0 0 0} {1 2 3} {4 5 6} {5 6 7} {6 7 8} {5 7 9} {3 4 5} 1 [0 1 2 6] 

/**

/**

//load t.mcif { 444 555 1} packed
//load t.mcif { 1 1 1} packed filter "cell=!a-b,a+b,c;0,0,0"
load t.mcif { 1 1 1} packed filter "cell=!a-b,a+b,c;0,0,1/4"
rotate x -90
//unitcell "parent"

/**

load "file:///C:/temp/downloads/0.52.png|0.51.Ho2Ru2O7.mcif" {1 1 1} packed
unitcell "1/2a-1/2b,1/2a+1/2b,c;1/4,1/4,0"
vectors off

/**
load t.mcif { 444 555 1} packed
load append t.mcif { 1 1 1} packed filter "cell=!a-b,a+b,c;0,0,0"
load append t.mcif { 1 1 1} filter "cell=!a-b,a+b,c;0,0,1/2"

//unitcell "parent"

/**
script "file:///C:/temp/downloads/0.52.png"
unitcell "1/2a-1/2b,1/2a+1/2b,c;1/4,1/4,0"
/**
load t.phonon {2 2 1} PACKED SUPERCELL "y+z,x+z,x+y"  filter "q=1"
/**
load "t.phonon" {2 2 1} packed supercell "2x,2y,2z"


select displayed
show selected
label %a


/**
supercell "y+z,x+z,x+y";display _U
select displayed
show selected
label %a

/**
load t.phonon {2 2 1} PACKED SUPERCELL "y+z,x+z,x+y" filter "q=1"
function newFrame() {
set echo bottom left; echo @{_currentFrame};
switch(_currentFrame) {
case 1: 
case 2:
case 3:
case 4:
  print "now at " + _currrentFrame;
}

}

set animFrameCallback "jmolScript:newFrame"

animation mode loop
animation on


/**
load t197.bcs packed
draw symop @1 @19

/**

load t3.cif packed

/**

/*
 * sg
 */
function sg (a){
print script("show spacegroup "+a).lines[1][20] 
}

load t2.bcs packed 0.01
{1.1}.property_dist =  {1.1}.distance.min({1.2})
{1.1}.spacefill={1.1}.property_dist.all
color {1.1} property_dist "bwr" range 0 0.5
select 1.2
stars -0.3
set starscale 0.1
frame *
unitcell {1.2}

/**
background white
load t2.bcs packed
spacefill off
wireframe only
select 1.1
spacefill 0.2
select 1.2
stars 0.3
set zshade
frame *


/**

load "" packed
{1.1}.property_dist =  {1.1}.distance.min({1.2})
select {1.1}
{1.1}.spacefill={1.1}.property_dist.all
select 1.2
stars -0.3
set starscale 0.1
write "c:/temp/toJavier1.png" as PNGJ
unitcell 2.1
unitcell {2.1}
unitcell {1.2}

//load $phenol as "p1.mol"
//load :phenol as "p2.mol"

load files "p1.mol" "p2.mol"
compare {1.1} {2.1} SMILES rotate translate

/**
set cartoonrockets
set rocketBarrels
load 3.pdb
structure none (155-156)
cartoons only
color structure

/**

load c:/temp/tensors.png
display atomno=50

/**
set vectorscentered true
load 	t.mcif {3 1 1} packed
vectors 0.2
vector scale 0.5
set vectorscentered true
show state/vect
connect delete
show state/ect
/**
load c:/temp/epfl-1.mol
load append c:/temp/epfl-1.sdf
label %[atomname]
frame *

/**
load caffeine.xyz

function rot(){
        select all;
        //rotateSelected 10.0 {1.0 0.0 0.0} {10.0 0.0 0.0};
	spin x 30 30;
        select none;
        return 1;
}

function no_rot1(){
        return rot();
}

function no_rot2(){
        var x = rot();
}

function rot_ok1(){
        rot();
}

/**
test.spt

/**
load =1msy/dssr
backbone -0.2
set backboneSteps
select leadatom
spacefill 1.5
label %[group1]
font label 24 bold
set labeloffset 0 0
color label grey
write "c:/temp/1mys_dssr.png" as PNGJ

/**

load files "c:/temp/dssr/1jj2/1jj2.pdb" + "c:/temp/dssr/1jj2/1jj2.out"
show dssr "kissingLoops.1"
select within(dssr, "kissingLoops.1")
display selected
backbone -0.2
center {visible}
color {within(dssr,"stems")} blue
color {within(dssr,"hairpinLoops")} green


/**
 *
 * //set debug
load files "c:/temp/dssr/1jj2/1jj2.pdb" + "c:/temp/dssr/1jj2/1jj2.out"
display nucleic
backbone only
set backboneSteps
backbone -0.2
select nucleic
color grey
select within(dssr,"helices")
color blue
select within(dssr,"stems")
color green
select within (dssr,"multiplets")
color magenta
select within (dssr,"bulges")
color red
select within (dssr,"kinkTurns")
color orange
select within (dssr,"lonePairs")
color yellow
select within (dssr,"singleStranded")
color white
select *

/**
load =1msy/dssr
backbone -0.2
set backboneSteps
select leadatom
spacefill 1.5
label %[group1]
font label 24 bold
set labeloffset 0 0
color label grey
write "c:/temp/1mys_dssr.png" as PNGJ

/**

load =1msy/dssr
set backboneStems
backbone -0.2
select within(dssr,"helices")
color blue
select within(dssr,"stems")
color red
select within (dssr,"singleStranded")
color white
select within (dssr,"multiplets")
color green
select within (dssr,"lonePairs")
color orange
select leadatom
spacefill 1.5
label %[group1]
font label 24 bold
set labeloffset 0 0
color label grey
write "c:/temp/1mys_dssr.png" as PNGJ

/**


load files "c:/temp/dssr/1jj2/1jj2.pdb" + "c:/temp/dssr/1jj2/1jj2.out"
display within(dssr,"kinkTurns[SELECT basePairs WHERE turnType=Normal]")
cartoons only
rotate best
write c:\temp\kinkturns_normal.png

/**

isosurface p4.mesh
zoom 800
/**

load files "c:/temp/dssr/1jj2/1jj2.pdb" + "c:/temp/dssr/1jj2/1jj2.out"
x=  getProperty("auxiliaryInfo.models.dssr.kinkturns.nts.nt")
select @{x.join()}
display selected
cartoons only
write c:\temp\kinkturns.png

load files "c:/temp/dssr/1jj2/1jj2.pdb" + "c:/temp/dssr/1jj2/1jj2.out"
x = getProperty("auxiliaryInfo.models.1.dssr.multiplets.nt")
calculate hbonds
display @{x[9]};zoom (displayed) 0
write c:/temp/multiplet9.png


/**
load files "c:/temp/dssr/1jj2/1jj2.pdb" + "c:/temp/dssr/1jj2/1jj2.out"
print getProperty("auxiliaryInfo.models.1.dssr.basepairs","SELECT nt* WHERE bp=C-G")

/**

DSSRParser ignored: List of 68 hairpin loops
List of 38 bulges
DSSRParser ignored: List of 38 bulges
List of 67 internal loops
DSSRParser ignored: List of 67 internal loops
List of 35 junctions
DSSRParser ignored: List of 35 junctions
List of 31 non-loop single-stranded segments
DSSRParser ignored: List of 31 non-loop single-stranded segments
List of 1 kissing loop interaction
DSSRParser ignored: List of 1 kissing loop interaction
List of 106 A-minor motifs
DSSRParser ignored: List of 106 A-minor motifs
List of 46 ribose zippers
DSSRParser ignored: List of 46 ribose zippers
	List of 9 (possible) kink turns
DSSRParser ignored: List of 9 (possible) kink turns

var a = 3
b = 4
print "a=" + a
print "b=" + b

function test() {
 print a
 print b
 c= a + b
}

test()

/**


x = load("t.png", true)
x.testing = "this is a test"
write @	x "tt.png"

/**

load =1blu
isosurface "=1blu"

/**
load 1crn.pdb
t = now();isosurface molecular;print now(t)


/**

vibration off;
print "line 1"
print "line 2"
print "line 3"
print "line 4"
print "line 5"





function test_throw() {
    for (var i = 0; i < 1; i++) {
	print "throwing test"
        throw CONTEXT test
        print i
    }
}

test_throw()

/**
load c:/temp/rsc/nmr_assigned.jdx


/**

load caffeine.mol

/**
load 1crn.pdb
   {*}.color = for(x;{*};if(x.temperature > 10;"red";if(x.temperature < 2;"blue";"white")))

   {*}.radius = for(x;{*};x.atomno *1.0/ 100)



/**
   {*}.color = for(x;{*};if(x.temperature > 10;"red";if(x.temperature < 2;"blue";"white")))

print if(1 < 3; if(4 < 5; "yes"; "no"); "false")


/**
c =[testing:"here"]
print c
c = [testing:"here"]
print c
c= [testing:"here"]
print c
c=[testing:"here"]
print c

/**
b = [1 2 3 [ 1 2 [1 2 [1 [testing:"here"] 3]]]]
print b..4..3..1

/**

b = [1 2 3 [ 4 5 [6 7 [8 [testing:"here"] 10]]]]
show b
b[4][3][3][2].more = "yes"
show b


b = [1 2 3 [ 4 5 [6 7 [8 9 10]]]]
show b
print ((b[4])[3])[1]
b[4][3][1] = 6666
show b

/**

load caffeine.mol
a = {*}
a.color = "red"
{atomno < 3}.color = "green"
{atomno == 5}.color = "yellow"
/**



//set loglevel 6
//set debugscript

b = quaternion()%"matrix"
b[1] = [1 2 3]
print b

b[-1] = [1 2 3]
print b

b[2][3] = 66
print b


/**

b = "testing"
b[1] = "T"
print b

b = "testing"
b[1][3] = "T"
print b

b = "testing"
b["t"] = "T"
print b

b = [testing:"here"]
b.testing= 33
print b

b = [10 [2] ]
b[2][1]= 33
print b

b = [10 ]
b[1]= 33
print b

/**

load caffeine.mol
a = {*}
print a

/********************************************

m = quaternion()%"matrix"
print m;

m[1][2] = 33

print m

/**
b = [1 [testing:"here"] [1 2 3 [5 6 7] 4]]
print b	
b[2].testing[1][1] = "H"
print b

/**

b = [1 [testing:"here"] 3 4]
b = [1 [testing:"here"] [1 2 3 [5 6 7] 4]]
print b	
b[3][4][2] = 633333
print b

/**
	a = "testing"
a[3][4] ="here"
print a

/**

defaultlattice = {1 1 1}
load caffeine.mol
b = [Test : 34, "my test": "OK"]
b.Test++
print b
a = {*}
a.color = "red"
a = 1
var bvar = 1
print bvar
print a
b = [1 [testing:"here"] 3 4]
print b	
b[3]= 33
b[2].testing = "now"
print b	

/**

b = [Test : 34, "my test": "OK"]
b.Test++
a = {*}
a.color = "red"
a = 1
var bvar = 1
print bvar
print a

b = [test : 34, "my test": "OK"]
b.test = b.test + 1
b.test3 =["one", 3, 4, 5]
print b["my test"] + " -- " + b.test +" " + b.test3[1]

b = [test : 34, "my test": "OK"]
b.test++
b.test3 =["one", 3, 4, 5]
print b["my test"] + " -- " + b.test +" " + b.test3[1]


/**

$ --b.test
script ERROR: invalid argument
----
          script = "b.test" = script "b.test" - >> 1 <<
$ --x
$ print x
37
$ b.test++
$ print b.test
48



try {
for(Var i = 0; i < 5; i++) {
  print "i=" + i
  var TEST = 33
  if (i == 2) throw context for1
}

} catch(e) {
 print "e=" + e
}
print "out"


/**

function test3{
  print test1["x"]
  test1["x"] = 33
  resume context test1
}

function testing(a,b,c, vret) {
print "testing: throwing context test1 within function testing"
print "testing: testv=" + testv;
print "testing: test2v=" + test2v;
print "testing: check test3 now"
  var x = 1
print "testing: x=" + x
save context "test1"

x++

vret[1]++

print "testing: restarting now within function testing"
print "testing: x=" + x
print "testing: loading 1crn.pdb"
load 1crn.pdb
return "from testing: x=" + x + " vret[1]=" + vret[1]

}

function test2() {

test2v = "test2";
var vret= [0];
print "test2:  calling function testing... with vret[1]=0"
var ret = testing(3, 4, 5, vret) 
print "test2: and now continuing in function test2...."
print "test2: testing returned: " + ret
print "test2: test1['_retval']=" + test1["_retval"]
print "test2: testing returned vret[1]=" + vret[1]
test2_ret = "from test2: vret[1]=" + vret[1]
return test2_ret

}

print "main: testing here"
testv = "test";

ret = test2
print "main: test2 returned: " + ret
print "main: "+ test2_ret + " (a global)"

print "main: and now continuing in main script"






/**

function test3{
  print test1["x"]
  test1["x"] = 33
  resume context test1
}

function testing(a,b,c) {
print "throwing context test1 within function testing"
print "testv=" + testv;
print "test2v=" + test2v;
print "check test3 now"
  var x = "t"
print "x=" + x
throw context "test1"

print "restarting now within function testing"
print "x=" + x
print "loading 1crn.pdb"
load 1crn.pdb

}

function test2() {

test2v = "test2";

print "within function test2, calling function testing"
testing 3 4 5 
print "and now continuing in function test2...."

}

testv = "test";

test2

print "and now continuing in main script"






/**
try{

  print "testing"
  var x = "t"
  throw "testing here"

  print "NO"

} 
catch(e) {
  print e.split("\n")[1];
  print "thown_value=" + thrown_value;
}







/**

x = [1 2 3]
x[1] = 3;
print x == [3 2 ({1 2 3})]	
print x == [3 2 3]	
x = "testing"
x[1] = 3
print x
x = {"testing":"here"}
print x
x["test"] = "now"
print x
print 3 - - 3

x = "testing"
x["t"] = "_"
print x

x = {"testing":"here"}
y = {"testing":"here"}

print x == y

y = {"testing":"now"}

print x == y

/**

load "c:/temp/t.docx|word/media/image1.png"
load files "$caffeine" ":caffeine"
print compare({1.1} {2.1} 'MAP' 'H'); 
refresh
zap 2.1

// load "c:/temp/t.docx|word/media/image1.png"

/**

at = []
    for (var i = 0; i <= 50; i++) {
      var t = i / 50.0;
print " " + i + " " + t
      at.push(t);
}
show at	

load 1d66.pdb
j = 0
n = now()
x = {*}
for (var i in x){j++}
print now(n)
print j

/**
load quartz.cif;zoom 50;
unitcell {-1 0 0}
draw unitcell mesh nofill

/**
load $viagra

if ({*}.molecule.max > 1 || {*}.modelindex.max > 0){ 
  delete molecule > 1 or modelindex > 0;
  x = getProperty('extractModel',{*});
  show smiles
  load inline @x
  show smiles
}

/**

zap
load data "append"string
__Jmol-14_01311417043D 1   1.00000     0.00000     0
Jmol version 14.1.8_dev_2014.01.29  2014-01-29 06:37: EXTRACT: ({16:31})
 16 16  0  0  0  0              1 V2000
   5.75700   1.08260   0.00000 C   0  0  0  0  0  0
   4.01070   1.65010   0.00000 C   0  0  0  0  0  0
   4.18880   0.52570   0.00000 H   0  0  0  0  0  0
   3.44340   3.39620   0.00000 C   0  0  0  0  0  0
   1.60730   3.39620   0.00000 C   0  0  0  0  0  0
   1.04000   1.65010   0.00000 C   0  0  0  0  0  0
   2.52530   0.57080   0.00000 O   0  0  0  0  0  0
   5.40520   0.00000   0.00000 H   0  0  0  0  0  0
   6.83960   0.73090   0.00000 H   0  0  0  0  0  0
   6.10880   2.16530   0.00000 H   0  0  0  0  0  0
   4.55700   3.63290   0.00000 H   0  0  0  0  0  0
   3.32440   4.52830   0.00000 H   0  0  0  0  0  0
   1.72630   4.52830   0.00000 H   0  0  0  0  0  0
   0.49390   3.63290   0.00000 H   0  0  0  0  0  0
   0.00000   2.11300   0.00000 H   0  0  0  0  0  0
   0.47080   0.66410   0.00000 H   0  0  0  0  0  0
  2  1  1  0  0  0
  2  3  1  0  0  0
  2  4  1  0  0  0
  4  5  1  0  0  0
  5  6  1  0  0  0
  6  7  1  0  0  0
  2  7  1  0  0  0
  1  8  1  0  0  0
  1  9  1  0  0  0
  1 10  1  0  0  0
  4 11  1  0  0  0
  4 12  1  0  0  0
  5 13  1  0  0  0
  5 14  1  0  0  0
  6 15  1  0  0  0
  6 16  1  0  0  0
M  END
end "append"

load data "append"string
__Jmol-14_01311417053D 1   1.00000     0.00000     0
Jmol version 14.1.8_dev_2014.01.29  2014-01-29 06:37: EXTRACT: ({0:15})
 16 16  0  0  0  0              1 V2000
   2.07340   0.00830  -0.32760 C   0  0  0  0  0  0
   0.75890  -0.06270   0.45190 C   0  0  0  0  0  0
  -0.04620  -1.14500  -0.04490 O   0  0  0  0  0  0
  -0.04150   1.23850   0.24910 C   0  0  0  0  0  0
  -1.38450   0.76690  -0.35970 C   0  0  0  0  0  0
  -1.42550  -0.72450   0.06030 C   0  0  0  0  0  0
   0.96440  -0.21000   1.51220 H   0  0  0  0  0  0
   2.66520   0.84920   0.03380 H   0  0  0  0  0  0
   2.63140  -0.91700  -0.18400 H   0  0  0  0  0  0
   1.86020   0.14310  -1.38800 H   0  0  0  0  0  0
  -0.20940   1.73590   1.20440 H   0  0  0  0  0  0
   0.47830   1.90240  -0.44160 H   0  0  0  0  0  0
  -2.22130   1.31580   0.07210 H   0  0  0  0  0  0
  -1.37520   0.86520  -1.44520 H   0  0  0  0  0  0
  -1.77800  -0.82460   1.08680 H   0  0  0  0  0  0
  -2.05490  -1.29780  -0.62040 H   0  0  0  0  0  0
  1  2  1  0  0  0
  2  3  1  0  0  0
  2  4  1  0  0  0
  4  5  1  0  0  0
  5  6  1  0  0  0
  6  3  1  0  0  0
  2  7  1  0  0  0
  1  8  1  0  0  0
  1  9  1  0  0  0
  1 10  1  0  0  0
  4 11  1  0  0  0
  4 12  1  0  0  0
  5 13  1  0  0  0
  5 14  1  0  0  0
  6 15  1  0  0  0
  6 16  1  0  0  0
M  END
end "append"


/**

x=[4];
print x[1][2]

/**

q = 0;
while (q < 2) {

   print "in xxx2" 
    for (i=0;i<4;i++) {
        for (j=0;j<4;j++) {
   print "this is " + i + " " + j 
   break 0
        }
    }
   print "done xxx2" 

delay 1

   print "in xxx2" 
    for (i=0;i<4;i++) {
        for (j=0;j<4;j++) {
   print "this is " + i + " " + j 
if (j == 2) {
   break 1
}
        }
    }
   print "done xxx2" 

delay 1

   print "in xxx2" 
    for (i=0;i<4;i++) {
        for (j=0;j<4;j++) {
   print "this is " + i + " " + j 
break 2
        }
    }
   print "done xxx2" 
}
print "all done"

/**


function xxx2 {
   print "in xxx2" 
    for (i=0;i<4;i++) {
        for (j=0;j<4;j++) {
   print "this is " + i + " " + j 
   break 1
        }
    }
   print "done xxx2" 
}

j = 33
print "running xxx2"
xxx2()
print "done running xxx2"


/***
function xyz {
    print "A:" + now(xxx) + " delaying 1"
    delay 1
    print "B":" + now(xxx) + " returning true"
    return true
}
function test {
    xxx=now()
    xyz
    z=xyz
}


test

/**


0        \ ~1 sec = ok
1047  /
1047  \ ~0 sec = not ok
1112  / 


/**


load $C\C=C\CC
select _C
wireframe off
spacefill off
display !_H
select visible // 5  (but nothing is showing)

/**
load caffeine.xyz;
i = 0
for (a in {displayed})  { a.property_displayed = ++i }
print  "OK"
for (a in {displayed})  { {a}.color = "orange" }
print "fine"
label %[property_displayed]

/**
/*

formatted table from arrays using the format() command

x = {1.1}.xyz.all
y = {1.1}.label("%a.%03i")
y = y.add("\t",format("%10.5p",x))
unitcell {%1}
y = y.add("\t",format("%10.5p",x.fxyz))
unitcell {%2}
y = y.add("\t",format("%10.5p",x.fxyz))
unitcell {%3}
y = y.add("\t",format("%10.5p",x.fxyz))
print y.sort

*/

zap
//set autobond false;
load "file:///C:/temp/Jana2006/Lilianite-composite.cif" {1 2 1}  
connect {_pb} {_pb} delete
connect 2.8 3.5 {_Pb} {_S}

unitcell {%2}
unitcell {455 675 1}
 
unitcell {%3}
unitcell {634 844 1}
load append "c:/temp/jana2006/lilianite-composite_tmp.cif"
//load append "c:/temp/jana2006/l0_tmp.cif"

select 2.1
spacefill off
stars 0.6
color red
color bonds cpk

reset;center {6.767502 10.225502 2.0520003}; rotate z -20.54; rotate y 7.26; rotate z 8.67; zoom 390.76; translate x -67.18; translate y 15.99;

select 1.1
spacefill 0.2

select *
wireframe

frame *
/**

load "C:/temp/Jana2006/lastas2_jobst_anharm.cif" {100 1 1}
s_1 = {s1 and symop=12}
la_2 = {la2 and symop=13}
display s_1 or la_2
modulation off
props = getProperty("atominfo.modulation.tau[0]", {la_2})
dla = la_2.distance.all(s_1)
nla = la_2.count
out = []
for (var i = 1; i <= nla; i++) {
 var tau = (props[i])[0]
 tau = tau - tau\1
 out += dla[i].add("\t"+tau,"")
}
write var out clipboard

*/

 //t3.spt
 //moveto /* time, axisAngle */ 1.0 { 636 563 -528 118.33} /* zoom, translation */  80.0 -19.6 0.94  /* center, rotationRadius */ {4.9372087 5.7768936 11.506361} 15.321099 /* navigation center, translation, depth */ {0 0 0} 0 0 0 /* cameraDepth, cameraX, cameraY */  3.0 0.0 0.0;
 
 //for (var i = 0; i < 10; i++){modulation @{point(i, 0, 0)} true;color property  vxyz;delay 1}
 


dir = "c:/temp/ssg/jmol/gallery"
dir = "c:/temp/jana2006"

function test(name) {

load @{dir + "/" + name + "_tmp.cif"}
//set debug
//set loglevel 6
load append @{dir + "/" + name + ".cif"} {2 2 2}
set debug off
color {2.1} orange
wireframe only
spacefill 0.1
frame 2.1
select 2.1
stars -0.3
frame *
select *
wireframe
select on %2
}
//getproperty atominfo.modulation @4


/** 
set debug
load c:/temp/3d.cif {1 1 3}
getproperty atominfo @42

/**
set debug false
load 1hxw.pngj
ligandAtoms = {displayed and ligand}
var x = {selected}
var p = {displayed and not ligand}
var closest = ({})
while (p) {
 var g = within(group, p[1])
 closest |= g.distance.min(ligandAtoms, true);
 p &= !g
}
select closest
label %n %r
select x;

/**
 *

script plott.spt
/**
*
 load c:/temp/tmp/sr1trimmed.cif {1 0 0}

/**

load 1m4x.cif filter "biomolecule 1;bychain"
draw symop 5

/**
 *
script plott.spt

/**

moveto /* time, axisAngle */ 1.0 { 620 604 -501 123.42} /* zoom, translation */  56.76 -4.42 3.18  /* center, rotationRadius */ {1.9768493 13.3745 2.8501} 10.011758 /* navigation center, translation, depth */ {0 0 0} 0 0 0 /* cameraDepth, cameraX, cameraY */  3.0 0.0 0.0;
 save orientation o;load c:/temp/sr2.cif {1 1 1} ;restore orientation o;spacefill 0.1;wireframe 0.05

function plott(a, a2) {

d = []

selectionhalos on

if (a2) {

select a or a2

var p1 = a.modulation(1e10)[1]
var p2 = a2.modulation(1e10)[1]
for (var i = 0; i <= 50; i++) {
  var t = i / 50.0;
  var b1 = a.modulation(t)[1];
  var b2 = b.modulation(t)[1];
  var m = distance((p1 + b1).xyz, (p2 + b2).xyz);
  d[i+1] = "" + t + "\t" + m; 
}

} else {

select a 
var p = a.modulation(1e10)[1]
for (var i = 0; i <= 50; i++) {
  var t = i / 50.0;
  var b = a.modulation(t)[1];
  var m = (b + p).xyz;
  d[i+1] = "" + t + "\t" + b.xyz + "\t" + m; 
}

}
print d.replace("}"," ").replace("{"," ");

}

print "plott(a)"

plott(@1)


plott(@1, @9)

plott(@1 @30)


 *load sofosbuvir.mol
load append sofosbuvir_pa-0.mol

frame *
display *
select 2.1

compare {2.1}{1.1} // ok
select 2.1
select 1.1
compare {2.1}{1.1} subset {atomno<16} // reports RMSD=0
select atomno<16
selectionhalo
compare {2.1}{1.1} subset {atomno<16} translate rotate

/**

load 1blu.pdb

function gotoLigand(xxxx,ligandAtoms) {
//var x = {selected}[1]
var x = {within(group, selected)}
return "testing"
}

print gotoLigand("", "FS4")

//t3.spt;
//set celshading; set celshadingPower 2;

load 1crn.pdb;background white;spacefill only
/**
load t2.json
load append $penicillin
frame *
compare {1.1} {2.1} bonds smiles rotate translate 0.0
minimize {1.1} 


/**

load c:/temp/downloads/cudtar.mol
/**

load 1jek.pdb filter "biomolecule 1"
//load 1stp filter "biomolecule 1"
color property symop
isosurface sa symmetry sasurface 0 

/**



it is the best lesson I le