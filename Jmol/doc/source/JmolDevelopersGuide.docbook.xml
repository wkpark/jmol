<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
		"../../build/docbook-xml/docbookx.dtd">

<book id="jmol-devel-guide" lang="en">

<bookinfo>
	<title>Jmol Developer's Guide</title>
	<author>
		<othername>The Jmol Development Team</othername>
		<affiliation>
			<address>
				<email>jmol-developers@lists.sourceforge.net</email>
			</address>
		</affiliation>
	</author>
	<copyright>
		<year>2005</year>
		<year>2006</year>
		<holder>The Jmol Development Team</holder>
	</copyright>
</bookinfo>

<chapter id="Prerequisites">
	<title>Prerequisites</title>
	<itemizedlist>
		<para>
			The following package are necessary:
		</para>
		<listitem>
			<para>
				<package>Java 2 JDK 1.4</package> or  <package>Java 5 JDK 1.5</package>
				(<ulink url="http://java.sun.com/" />).
			</para>
		</listitem>
		<listitem>
			<para>
				<package>Apache Ant</package>
				(<ulink url="http://jakarta.apache.org/ant"/>) - not necessary if you
				are using Eclipse with a Windows PC
				(see <link linkend="Eclipse">below</link>).
			</para>
			<para>
				On Linux/Unix/OSX try to install <package>Apache Ant</package> using
				a package installer.
			</para>
		</listitem>
		<listitem>
			<para>
				CVS - The definitive CVS documentation is at
				<ulink url="http://cvsbook.red-bean.com/cvsbook.html"/>.
			</para>
			<para>
				On Win32 you can use <package>WinCVS</package>
				from <ulink url="http://www.wincvs.org"/>, but a far more sophisticated
				and much easier to use and install alternative
				is <package>Eclipse</package>
				from <ulink url="http://www.eclipse.org/downloads"/>.
				See <xref linkend="Eclipse"/>, that covers Eclipse use.
			</para>
			<para>
				On Mac OSX the cvs software comes on the Developer's CD,
				which can be freely downloaded from Apple.
			</para>
		</listitem>
	</itemizedlist>
</chapter>
  
<chapter id="CheckingOutJmol">
	<title>Checking Out Jmol from CVS</title>
	<para>
		If you are using Eclipse, see <xref linkend="Eclipse"/>.
	</para>
	<para>
		For anonymous checkout from SourceForge cvs, use the following command and hit
		the <keycap>Enter</keycap> key when prompted for the password:
		<screen><prompt>~/workspace$</prompt> cvs -d:pserver:anonymous@cvs.sf.net:/cvsroot/jmol login</screen>
	</para>
	<para>
		Then check out the source:
		<screen><prompt>~/workspace$</prompt> cvs -d:pserver:anonymous@cvs.sf.net:/cvsroot/jmol co -P Jmol</screen>
	</para>
	<para>
		This creates a directory called <filename class="directory">Jmol</filename>
		(fitting the name of the CVS module). If you want to check out the sources
		into another directory use:
		<screen><prompt>~/workspace$</prompt> cvs -d:pserver:anonymous@cvs.sf.net:/cvsroot/jmol co -P -d <replaceable>directory</replaceable> Jmol</screen>
	</para>
	<para>
		We work from the checked out directory (in the first case, this
		is <filename class="directory">Jmol</filename>):
		<screen><prompt>~/workspace$</prompt> cd Jmol</screen>
	</para>
	<para>
		To update your soucres, go into the checked out directory (see above) and then type:
		<screen><prompt>~/workspace/Jmol$</prompt> cvs update -dP</screen>
	</para>
	<para>
		<orgname>Sourceforge.net</orgname> provides basic instructions how to use
		CVS. Please refer to their <ulink
		url="http://sourceforge.net/docman/?group_id=1">documentation
		section</ulink>.
	</para>
</chapter>

<chapter id="BuildingJmol">
	<title>Building Jmol</title>
	<para>
		If you are using Eclipse, see <xref linkend="Eclipse"/>. Otherwise read this
		section carefully. In additon to the prerequisites mentioned
		in <xref linkend="Prerequisites"/> you will of course need the Jmol source
		code. It can be either downloaded from the <ulink
		url="http://sourceforge.net/project/showfiles.php?group_id=23629">SourceForge
		project files</ulink> section or checked out from the <ulink
		url="http://sourceforge.net/cvs/?group_id=23629">SourceForge
		CVS repository</ulink> section.
	</para>
	<para>
		Once you have all the prerequisites, Jmol can be built from the top source
		directory with the <command>ant</command> command.
	</para>
	<para>
		On Linux/Unix/OSX type:
		<screen><prompt>~/workspace/Jmol$</prompt> ant</screen>
	</para>
	<para>
		Windows users not using Eclipse type:
		<screen><prompt>C:\workspace\Jmol&gt;</prompt> ant</screen>
	</para>
</chapter>
  
<chapter id="RunningJmol">
	<title>Running Jmol</title>
	<para>
		The development version of the Jmol application is normally run by simply
		executing the jmol script in the Jmol development directory. 
	</para>
	<para>
		The development version of the Jmol applet is normally run by copying the
		built <filename class="libraryfile">*.jar</filename> files into a test
		directory and then running a web page that accesses them.
	</para>
	<para>
		On Linux/Unix/OSX:
		<screen><prompt>~/workspace/Jmol$</prompt> ./jmol</screen>
	</para>
	<para>
		On Windows (not using Eclipse):
		<screen><prompt>C:\workspace\Jmol&gt;</prompt> jmol</screen>
	</para>
	<para>
		If you are using the Eclipse <acronym>IDE</acronym>, you can run the
		application and/or the applet from within Eclipse. This allows for simpler
		debugging. See <xref linkend="Eclipse"/> for more information.
	</para>
</chapter>
  
<chapter id="CodingStandard">
	<title>Coding Standard</title>
	<itemizedlist>
		<listitem>
			<para>
				Your text editor should indent for you. If it doesn't then either
				learn how to enable it or get another editor.
			</para>
		</listitem>
		<listitem>
			<para>
				Indentation level should be <emphasis role="bold">two spaces</emphasis>.
		    <programlisting>class Foo {
  int someClassVariable;

  Foo(int evenOrOdd) {
    someClassVariable = 99;
  }

  ...
}</programlisting>
			</para>
		</listitem>
		<listitem>
			<para>
				Space characters should be used instead of tabs.
			</para>
		</listitem>
		<listitem>
			<para>
				Assignment and arithmetic operators generally contain spaces on both
				sides.
				<programlisting>a = b + c;</programlisting>
			</para>
			<para>
				You are allowed to eliminate the spaces within expressions in order
				to make operator precedence more clear.
				<programlisting>int cSquared = a*a + b*b;</programlisting>
			</para>
		</listitem>
		<listitem>
			<para>
				Spaces follow commas in argument lists.
				<programlisting>foo(a, 3.14159, "jmol");</programlisting>
			</para>
		</listitem>
		<listitem>
			<para>
				Lines should be no more than <emphasis role="bold">80</emphasis>
				characters wide.
			</para>
		</listitem>
		<listitem>
			<para>
				Open brace goes on the line that starts the block. Close brace goes
				on a line by itself.
				<programlisting>if (condition) {
    ...
  } else {
    ...
  }
  
  while (condition) {
    ...
  }</programlisting>
			</para>
		</listitem>
		<listitem>
			<para>
				Loop indexes start at 0, not 1.
			</para>
		</listitem>
		<listitem>
			<para>
				The <emphasis role="bold">only</emphasis> valid comparison operators for loop
				termination are <code>&lt;</code> and <code>&gt;=</code>
				... anything else is probably a bug. If you are really
				<emphasis role="bold">sure</emphasis> that it is not a bug then put a comment in
				the code.
			</para>
		</listitem>
		<listitem>
			<para>
				Use long descriptive variable names and method names. Do not be
				afraid of typing.
			</para>
		</listitem>
		<listitem>
			<para>
				Line-by-line comments within the code are
				<emphasis role="bold">discouraged</emphasis> ... except in very special
				circumstances. If you put in lots of comments like this then you may
				find them deleted.
			</para>
		</listitem>
		<listitem>
			<para>
				If you feel obligated to insert comments put them as javadoc before
				the function body.
			</para>
		</listitem>
		<listitem>
			<para>
				If your code is changing then do not put in comments. <emphasis role="bold">Bad/outdated
				comments are worse than no comments.</emphasis>
			</para>
		</listitem>
		<listitem>
			<para>
				You may want to look
				at <ulink url="http://www.amazon.com/exec/obidos/ASIN/0521777682">The
				Elements of Java Style by Vermeulen, et al</ulink>.
			</para>
		</listitem>
	</itemizedlist>
 </chapter>
  
<chapter id="Releasing">
	<title>Making a release</title>
	<para>
		A Jmol release consists of both the application and the applet.
		Presumably both will have been well tested. For release, we are generating
		a number of <filename>JAR</filename> files using Java 1.1. This is to
		provide compatibility with the Microsoft Java Runtime Environment.
		<!-- wasn't support for MS JVM dropped? -->
	</para>
	<para>
		In the <filename class="directory">Jmol-data</filename> CVS module directory
		a number of test files are located for the input filters. All files below
		that module should be checked prior to a release.
	</para>
</chapter>

<chapter id="Packaging">
	<title>Packaging</title>
	<para>
		Distribution packages will be made for any platform for which a developer
		promises to provide support. File used to create packages should be
		commited to CVS under the Jmol/packaging directory. Currently the
		following packages are available:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				<ulink url="http://www.debian.org">Debian</ulink>
				(by Daniel Leidert and Egon Willighagen)
			</para>
		</listitem>
		<listitem>
			<para>
				RPM (by Miguel Howard)
			</para>
		</listitem>
	</itemizedlist>
</chapter>
  
<chapter id="CVS">
	<title>Working with Jmol's CVS</title>
	<para>
		This section gives information on how to work with Jmol's CVS at
		SourceForge.
	</para>
    
	<sect1 id="tagging">
		<title>Tagging CVS</title>
		<para>
			It is important to tag CVS when a distribution was made. This makes it
			possible to later retrieve the exact source code from CVS in that
			release. This can be done with
			<screen>cvs tag <replaceable>tag-name</replaceable></screen>
			in the directory where the CVS files are stored.
		</para>
	</sect1>
    
	<sect1 id="branching">
		<title>CVS Branches</title>
		<para>
			Sometimes it is convenient to have separate branches to work on. One
			for an upcoming release, and one branch for the unstable version. Minor
			bug fixes can then go into the stable branch, while major changes can
			go into the unstable branch. This section explains how to access, use,
			and create branches.
		</para>

		<sect2 id="branch_access">
			<title>Accessing a branch</title>
			<para>
				The command
				<screen>cvs checkout <replaceable>module</replaceable></screen>
				by default gets the source code from the <emphasis>HEAD</emphasis>
				branch, which is the unstable branch of Jmol. Accessing a specific
				branch can be done with (e.g. for the <emphasis>b6</emphasis> branch):
				<screen>cvs checkout -r b6 -d Jmol-6 Jmol</screen>
			</para>
			<para>
				This will check out a copy of the Jmol module from the b6 branch into
				a directory called <filename class="directory">Jmol-6</filename>.
			</para>
			<para>
				To determine to which branch a specific locally stored file belongs,
				you can do:
				<screen>cvs status <replaceable>file</replaceable></screen>
			</para>
		</sect2>
      
		<sect2 id="branch_creating">
			<title>Creating a branch</title>
			<para>
				A branch of <emphasis>HEAD</emphasis> can be created with
				<screen>cvs rtag -b -r HEAD <replaceable>branch-name</replaceable> <replaceable>module</replaceable></screen>
			</para>
		</sect2>
      
		<sect2 id="branch_merging">
			<title>Merging branches</title>
			<para>
				Bug fixes which have been commited to a branch can be merged to
				the <emphasis>HEAD</emphasis> branch. To do this, check out (or update)
				a	<emphasis>HEAD</emphasis> branch, and then type in that directory
				<screen>cvs update -j <replaceable>parameter</replaceable> <replaceable>branch-to-merge</replaceable></screen>
				Then the branch from which the changes were merged
				with <emphasis>HEAD</emphasis> should be tagged, to make it possible
				to merge later changes with <emphasis>HEAD</emphasis> too. For
				example, a session might look like:
				<screen><prompt>&gt;</prompt> cd ~/data/SF/Jmol/Jmol
<prompt>&gt;</prompt> cvs update -j b6
<prompt>&gt;</prompt> cd ~/data/SF/Jmol/Jmol-6
<prompt>&gt;</prompt> cvs tag b6-merged-20030725</screen>
			</para>
      
			<para>
				Changes made after this merge to branch <emphasis>b6</emphasis>, can
				then be merged with <emphasis>HEAD</emphasis> with:
				<screen><prompt>&gt;</prompt> cd ~/data/SF/Jmol/Jmol
<prompt>&gt;</prompt> cvs update -j b6-merged-20030725 -j b6
<prompt>&gt;</prompt> cd ~/data/SF/Jmol/Jmol-6
<prompt>&gt;</prompt> cvs tag b6-merged-20031011</screen>
			</para>
		</sect2>						

	</sect1>

</chapter>
  
<chapter id="Eclipse">
	<title>Using Eclipse</title>
	
	<sect1 id="Eclipse_prerequisites">
		<title>Eclipse prerequisites</title>
		<itemizedlist>
			<listitem>
				<para>
					<package>Java 2 JDK 1.4</package> or  <package>Java 5 JDK 1.5</package>
					(<ulink url="http://java.sun.com/" />).
				</para>
			</listitem>
			<listitem>
				<para>
					<package>Eclipse SDK</package> 3.1
					(<ulink url="http://www.eclipse.org/downloads" />)
				</para>
			</listitem>
		</itemizedlist>
		<para>
			Eclipse must be installed and correctly configured before following
			this procedure.
		</para>
	</sect1>
    
	<sect1 id="Eclipse_CVSConfig">
		<title>CVS Repository configuration</title>
		<para>
			To configure Eclipse to access Jmol's CVS repository, do the following:
		</para>
		<itemizedlist>
			<listitem>
				<para>Launch Eclipse.</para>
			</listitem>
			<listitem>
				<para>
					Using the menu system at the top of the application, navigate to <menuchoice>
						<guimenu>Window</guimenu>
						<guisubmenu>Open Perspective</guisubmenu>
						<guimenuitem>Other...</guimenuitem>
					</menuchoice> and choose <guimenuitem>CVS Repository Exploring</guimenuitem>.
					Then hit the <guibutton>[OK]</guibutton> button.
				</para>
			</listitem>
			<listitem>
				<para>
					Then <mousebutton>right</mousebutton> click in
					the <guilabel>CVS Repositories</guilabel> windows and select <menuchoice>
						<guisubmenu>New</guisubmenu>
						<guimenuitem>Repository Location...</guimenuitem>
					</menuchoice> in the contextual menu.
				</para>
			</listitem>
			<listitem>
				<para>
					In the <guilabel>Add CVS Repository</guilabel> window, enter the
					following values:
					<variablelist>
						<varlistentry>
							<term><parameter>Host:</parameter></term>
							<listitem>
								<para><emphasis>cvs.sourceforge.net</emphasis></para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term><parameter>Repository path:</parameter></term>
							<listitem>
								<para><userinput>/cvsroot/jmol</userinput></para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term><parameter>Authentication:</parameter></term>
							<listitem>
								<para>
									<userinput>anonymous</userinput> for anonymous access,
									or <userinput>your login id</userinput> for developer access
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term><parameter>Password:</parameter></term>
							<listitem>
								<para>
									<userinput>empty</userinput> for anonymous access
									or <userinput>your password</userinput> for developer access
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term><parameter>Connection type:</parameter></term>
							<listitem>
								<para>
									<userinput>pserver</userinput> for anonymous
									or <userinput>extssh</userinput> for developer access
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term><parameter>Use Default Port</parameter></term>
							<listitem>
								<para><userinput>checked</userinput></para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term><parameter>Validate Connection on Finish</parameter></term>
							<listitem>
								<para><userinput>checked</userinput></para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term><parameter>Save Password</parameter></term>
							<listitem>
								<para>
									<userinput>checked</userinput> if password should be stored
									or <userinput>unchecked</userinput> if you want to type the password
									every time you need it
								</para>
							</listitem>
						</varlistentry>
					</variablelist>
				</para>
				<para>
					The hit the <guibutton>[Finish]</guibutton> button and you are done.
				</para>
			</listitem>
		</itemizedlist>
	</sect1>
    
	<sect1 id="Eclipse_CheckingOut">
		<title>Checking Out Jmol from CVS</title>
		<itemizedlist>
			<para>To check out Jmol from CVS, do the following:</para>
			<listitem>
				<para>
					Switch to the <guilabel>CVS Repository Exploring perspective</guilabel>
					using <menuchoice>
						<guimenu>Window</guimenu>
						<guisubmenu>Open Perspective</guisubmenu>
						<guimenuitem>Other...</guimenuitem>
					</menuchoice> and choose <guimenuitem>CVS Repository Exploring</guimenuitem>.
					Then hit the <guibutton>[OK]</guibutton> button.
				</para>
			</listitem>
			<listitem>
				<para>
					<mousebutton>Click</mousebutton> on the repository location you added in the
					previous section and then <mousebutton>click</mousebutton>
					on <emphasis role="bold">HEAD</emphasis>. You should see a message on the
					status line indicating that Eclipse is connecting to the server.
				</para>
			</listitem>
			<listitem>
				<para>
					Right click on <command>Jmol</command> and select 
					<menuchoice>
						<guimenu>Check Out</guimenu>
						</menuchoice>
					in the contextual menu. The files should start transferring. 
					If you do not want to wait, you can indicate that you want the transfer to occur in the background. 
				</para>
			</listitem>
			<listitem>
				<para>
					If you want, you can also check out Jmol-web: Right click on
					<command>Jmol-web</command> and select 
					<menuchoice>
						<guimenu>Check out</guimenu>
					</menuchoice>
					in the contextual menu.
				</para>
			</listitem>
		</itemizedlist>
	</sect1>
    
	<sect1 id="Eclipse_Configuring">
		<title>Configuring Eclipse to build Jmol</title>
		<orderedlist numeration="loweralpha">
			<para>
				To configure Eclipse 3.1 to build Jmol, you need to make sure, that:
			</para>
			<listitem>
				<para>
					the location of the Java executables (<filename>javac.exe</filename>
					and <filename>jarsigner.exe</filename>) is identified</para>
			</listitem>
			<listitem>
				<para>
					the location of the Java library (<filename class="libraryfile">tools.jar</filename>)
					is identified
				</para>
			</listitem>
			<listitem>
				<para>
					Eclipse is using the same version of the Java compiler as the Java Runtime Environment
				</para>
			</listitem>
		</orderedlist>

		<sect2>
			<title>Identifying the location of the Java executables</title>
			<para>
				Ant needs to know where to find <filename>javac(.exe)</filename>
				and <filename>jarsigner(.exe)</filename>. This simply requires adding the
				Java SDK <filename class="directory">bin</filename> directory to the
				<envar>PATH</envar> environment variable.
			</para>
			<!-- add info for Linux/Unix users how to add paths to PATH using export PATH... -->
			<para>
				To do this on Windows, you need to open the
				Windows "<guilabel>System Control Panel</guilabel>". On the
				<guilabel>Advanced</guilabel> tab, select <guibutton>[Environment Variables]</guibutton>.
				Scroll down to the <envar>PATH</envar> system variable and append to it
				a semicolon (;) followed by the path to the Java SDK binaries, something
				like "<userinput>;c:\j2sdk1.4.2_10\bin</userinput>".
			</para>
		</sect2>

		<sect2>
			<title>Identifying the location of the Java library</title>
			<para>
				Ant needs to know where to find
				<filename class="libraryfile">tools.jar</filename>. From <menuchoice>
					<guimenu>Window</guimenu>
					<guimenuitem>Preferences...</guimenuitem>
				</menuchoice>. In the <guilabel>Preferences</guilabel> Window go to <menuchoice>
					<guisubmenu>Ant</guisubmenu>
					<guimenuitem>Runtime</guimenuitem>
				</menuchoice> and select <guimenuitem>Global Entries</guimenuitem> and hit
				the <guibutton>[Add External JARs]</guibutton>. Navigate to the directory
				containing <filename>tools.jar</filename> (probably something
				like <filename class="directory">c:\j2sdk1.4.2_10\lib</filename>),
				select <filename class="libraryfile">tools.jar</filename> and
				hit <guibutton>[OK]</guibutton>.
			</para>
		</sect2>

		<sect2>
			<title>Matching the Java compiler to the Java Runtime Environment</title>
			<para>
				From <menuchoice>
					<guimenu>Window</guimenu>
					<guimenuitem> Preferences...</guimenuitem>
				</menuchoice> and there select <guisubmenu>Java</guisubmenu>. Compare the version
				listed for the compiler with that for the
				selected <guisubmenu>installed JREs</guisubmenu>. If they are not the same,
				use the <guibutton>Search</guibutton> facility to find more installed JREs.
				Then select the JRE that matches the compiler.
			</para>
		</sect2>

	</sect1>
    
	<sect1 id="Eclipse_Running">
		<title>Running and Debugging Jmol</title>
		<para>
			You can run and debug Jmol directly within Eclipse. 
		</para>
		<para>
			Open a Java Perspective using <menuchoice>
				<guimenu>Window</guimenu>
				<guimenuitem>Open Perspective</guimenuitem>
				<guimenuitem>Other...</guimenuitem>
			</menuchoice> and there select <guimenuitem>Java</guimenuitem>.
		</para>
		<para>
			To run either the application or the applet <mousebutton>right</mousebutton>
			click on <command>Jmol</command> under the <guibutton>Projects</guibutton> tab
			and select (for the applet) <menuchoice>
				<guisubmenu>Run As</guisubmenu>
				<guimenuitem>Java Applet</guimenuitem>
			</menuchoice> or (for the application) <menuchoice>
				<guisubmenu>Run As</guisubmenu>
				<guimenuitem>Java Application</guimenuitem>
			</menuchoice>. The main class for the application
			is <classname>org.openscience.jmol.app.Jmol</classname>. 
		</para>
	</sect1>

	<sect1 id="Eclipse_Building">
		<title>Building Jmol</title>
		<para>
			If not already done, open a Java Perspective using <menuchoice>
				<guimenu>Window</guimenu>
				<guimenuitem>Open Perspective</guimenuitem>
				<guimenuitem>Other...</guimenuitem>
			</menuchoice> and there select <guimenuitem>Java</guimenuitem>.
		</para>
		<para>
			To make a full build of Jmol under Eclipse, just do the following:
			Find the <command>build.xml</command> in the <guilabel>Package Explorer</guilabel>
			window and <mousebutton>right</mousebutton> click on it. Then select <menuchoice>
				<guisubmenu>Run As</guisubmenu>
				<guimenuitem>Ant Build</guimenuitem>
			</menuchoice> in the contextual menu. If the build fails, look carefully at
			the message, and if you can't figure it out, send a copy of it in an email message
			to <email>jmol-developers@sourceforge.net</email>. Problems might include Ant not
			being able to find the Java compiler (<errortext>"JAVA_HOME not in CLASSPATH?"</errortext>)
			or a difference in Java compiler and runtime environment versions (<errortext>"class
			file has wrong version 49.0, should be 48.0"</errortext>).
		</para>
	</sect1>
    
</chapter>

</book>


