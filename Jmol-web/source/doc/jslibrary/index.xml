<?xml version="1.0"?>
<document>
  <body>
    <title>Jmol.js JavaScript Library</title>
    
    <header>
      <p>
	<b>
	  Information on this page relates to the upcoming release
	  Jmol v10 release that is currently in beta test.
	</b>
      </p>
      <p>
	Jmol.js is a JavaScript library that can be used to simplify
	development of web pages that include the JmolApplet.
      </p>
    </header>

    <section title="Why should you use Jmol.js?">
      <p>
	We strongly recommend that you use Jmol.js to build your
	web pages. It automates the generation of many HTML tag
	sequences, thereby making the code simpler, easier to
	understand, and less error-prone.
      </p>
      <p>
	The Jmol.js library should work well with most web browsers
	released this century. In addition, on Win32 platforms
	it generally works fine	with the Netscape 4.* series of
	browsers (from the previous century).
      </p>
      <p>
	<i>Note that on Mac OS X, Internet Explorer is </i>not<i>
	supported because it does not provide LiveConnect
	communications between JavaScript and Java applets.
	Also note that the Mozilla family of browsers (including
	FireFox and Camino) must be configured to use Java 1.4.2
	using </i>
	<a href="http://javaplugin.sourceforge.net">
	  javaplugin.sourceforge.net
	</a>
      </p>
      <p>
	There are a few circumstances under which you may choose
	not to use the Jmol.js library. For example, you may be
	building an advanced web server application using
	server-side HTML generation, such as PHP, JSP, ASP, CGI, etc.
	In this case, it <i>might</i> be appropriate to generate
	the HTML code directly on your server rather than use
	the Jmol.js library. If you are unsure, then use the
	Jmol.js library. 
      </p>
    </section>

    <section title="Sample HTML page using Jmol.js">
      <p>
	<a href="." onClick='window.open("../demo/jssample0/", "jssample",
	   "width=250,height=350,screenX=10,screenY=10,left=10,top=10"); return false;'>
	  Click here
	</a>
	to open a new browser window that shows the sample
	page generated by the following html source code
<pre><![CDATA[
<html>
  <head>
    <title>Simple example</title>
    <script src="../jmol/Jmol.js"></script>
  </head>
  <body>
    <script>
      jmolInitialize("../jmol"); // REQUIRED
      jmolApplet(200, "caffeine.xyz");
    </script>
  </body>
</html>
]]></pre>
      </p>
      <p>
	<a href="." onClick='window.open("../demo/jssample1/", "jssample",
	   "width=250,height=350,screenX=10,screenY=10,left=10,top=10"); return false;'>
	  Click here
	</a>
	to see a slightly more complicated example that demonstrates the
	the different types of user inteface controls that can be generated
	using the Jmol.js library.
<pre><![CDATA[
<html>
  <head>
    <title>UI Controls example</title>
    <script src="../jmol/Jmol.js"></script> <!-- REQUIRED -->
  </head>
  <body>
    <form> <!-- form tags must enclose button/checkbox/radio/menu controls -->
      <script>
        jmolInitialize("../jmol"); // REQUIRED
        jmolSetAppletColor("skyblue"); // if you don't want black

	// 200x200 + file from another directory
	jmolApplet(200, "../jssample0/caffeine.xyz");
	jmolBr();
	// a radio group
	jmolHtml("atoms ");
	jmolRadioGroup([
          ["spacefill off",  "off"],
	  ["spacefill 20%",  "20%", "checked"],
	  ["spacefill 100%", "100%"]
	]);
	jmolBr();
	// a button
	jmolButton("reset", "Reset to original orientation");
	jmolBr();
	// a checkbox
	jmolCheckbox("spin on", "spin off", "spin");
	jmolBr();
	// a link
	jmolLink("move 360 0 0 0 0 0 0 0 2", "Rotate once about the x axis");
	jmolBr();
	// a menu
	jmolMenu([
	"background white",
	["background skyblue", null, "selected"],
	"background yellow",
	"background salmon",
	"background palegreen",
	"background black"
	]);
      </script>
    </form>
  </body>
</html>
]]></pre>
      </p>
    </section>

    <section title="General Recommendations">
      <ul>
	<li>
	  There is one directory on your web server that contains
	  Jmol.js, JmolApplet.jar, and any other jmol-specific
	  files. For the purposes of this discussion we will
	  call this directory <code>../your-jmol-directory</code>.
	</li>
	<li>
	  Every web page within your site should refer to
	  <code>../your-jmol-directory</code> using a relative
	  url. Directory relative paths which start with . or ..
	  should <i>always</i> be used. 
	  Server relative paths which start with / <i>might</i> be
	  acceptable in special circumstances.
	  Absolute URLs which start with http:// are <b>evil</b> and
	  should never be used.
	</li>
	<li>
	  Every page must contain the
	  following HTML command in the <code>head</code> section
	  in order to include the Jmol.js library:<br />
<pre><![CDATA[
  <head>
    ...
    <script src="../your-jmol-directory/Jmol.js"></script>
    ...
  </head>
]]></pre>
	</li>
        <li>
	  Every page must contain a call to
	  <code>jmolInitialize(codebaseDirectory {,...})</code>
	  as the first call into the Jmol.js library. 
	</li>

	<li>
	  Every page that contains buttons/checkboxes/radio buttons/menu
	  controls must contain bracketing
	  <code>&lt;form&gt;/&lt;/form&gt;</code> tags.
	  It is generally safe to open this tag immediately
	  after the <code>body</code> tag and close it
	  immediately before the <code>/body</code> tag. 
<pre><![CDATA[
  <body>
    <form>
    ...
    </form>
  </body>
</html>
]]></pre>
	</li>
      </ul>
    </section>

    <section title="Basic Scripting Commands">
      <section title="jmolInitialize">
	<code>
	  jmolInitialize(codebaseDirectory,
	  {unsupportedBrowserURL}, {noJavaURL})
	</code>
	Initializes the Jmol.js library and tests for browser compatibility.
	<ul>
	  <li>
	    The call to <code>jmolInitialize()</code> must be within the
	    <code>&lt;body&gt;</code> of the HTML page.
	  </li>
	  <li>
	    The required <code>codebaseDirectory</code> parameter specifies
	    the relative path of the directory containing the Jmol applet
	    files.
	  </li>
	  <li>
	    The optional <code>unsupportedBrowserURL</code> and
	    <code>noJavaURL</code> parameters specify relative paths
	    to HTML pages that should be shown to users with
	    unsupported/noncompliant web browsers. If these URLs are
	    not specified then those users will see an <code>alert</code>
	    message.
	  </li>
	</ul>
      </section>

      <section title="jmolApplet">
	<code>jmolApplet(size, {modelFilename}, {script}, {nameSuffix})</code>
	Allocates an JmolApplet. <code>size</code> should generally be an
	integer	pixel count in the range 100 to 800.
	<code>modelFilename</code> is the name of a file
	(or a relative URL to a cgi)
	on your web server. This can include a directory
	specification. <code>script</code> is a script that should be run
	after the molecular model is loaded.
	<p>
	  <i>
	    Advanced: <code>nameSuffix</code> should
	    only be specified if you want to explicitly control the
	    <code>name</code> and <code>id</code> attributes used as
	    part of the <code>applet</code> tag. The suffix which you
	    supply will be appended to the string "jmolApplet", so if you
	    specify "Foo" the attributes generated will be
	    <code>name='jmolAppletFoo' id='jmolAppletFoo'</code>.
	    In a database application where you are writing records
	    to a table you can feel free to provide an integer
	    as your suffix. 
	  </i>
	</p>
	<p>
	  <i>
	    Advanced: JmolApplet instances should generally be square.
	    If your application requires a rectangular JmolApplet,
	    then the <code>size</code> parameter may be specified
	    as an array containing two elements ... width and height
	    specified in pixel counts. This is usually easiest to
	    specify using JavaScript square bracket notation for
	    array constants ... as in <code>[400, 200]</code>.
	    The size must be fixed; percentages are not allowed.
	    Otherwise, many browsers die when the browser window
	    is resized. 
	  </i>
	</p>
      </section>

      <section title="jmolButton">
	<code>jmolButton(script, {label}, {id})</code>
	<p>
	  Draws a button with a text label. If <code>label</code> is
	  not specified it defaults to the first 32 chars of the script.
	  <code>script</code> is run when the button is pressed.
	</p>
	<p>
	  <code>id</code> will be set as both the HTML id and HTML name. It
	  will default to jmolButton0, jmolButton1, etc. 
	</p>
      </section>
      <section title="jmolCheckbox">
	<code>
	  jmolCheckbox(scriptWhenChecked, scriptWhenUnchecked,
	  labelHtml, {isChecked}, {id})
	</code>
	<p>
	  Displays a checkbox. <code>scriptWhenChecked</code> is run when
	  the checkbox is checked by the user. <code>scriptWhenUnchecked</code>
	  is run when the user unchecks the checkbox. <code>labelHtml</code> is
	  placed immediately after the checkbox. <code>isChecked</code> should
	  be set to a non-false value if you want the default state.
	</p>
	<p>
	  <code>id</code> will be set as both the HTML id and HTML name. It
	  will default to jmolCheckbox0, jmolCheckbox1, etc. 
	</p>
      </section>
      <section title="jmolRadioGroup">
	<code>
	  jmolRadioGroup(arrayOfRadioButtons, {separatorHtml}, {groupName})
	</code>
	<p>
	  Used to put up a group of mutually-exclusive radio buttons.
	  <code>arrayOfRadioButtons</code> is usually specified using
	  the JavaScript square brackets [ entryA, entryB, ... ] notation.
	  Each <code>entry</code>
	  is generally another array which contains a script, a label, and an
	  optional isChecked flag. If an <code>entry</code> is a single string
	  instead of an array, then that string is used for both the script
	  and the label.
	</p>
	<p>
	  <code>separatorHtml</code> is used to specify HTML code that should
	  be placed after each radio button. For example, to put the radio
	  buttons on separate lines you should pass in <code>"&lt;br&gt;"</code>
	  as the actual parameter. If <code>separatorHtml</code> is not
	  specified it defaults to <code>"&lt;nbsp; "</code>
	</p>
	<p>
	  <code>groupName</code> will be used as the common HTML name for
	  all radio buttons in the group. It will default to jmolRadioGroup0,
	  jmolRadioGroup1, etc. 
	</p>
      </section>
      <section title="jmolLink">
	<code>jmolLink(script, text, {id})</code>
	<p>
	  <code>text</code> is written as a link. <code>script</code> is run
	  when the user clicks on the link.
	</p>
	<p>
	  <code>id</code> will be set as both the HTML id and HTML name. It
	  will default to jmolLink0, jmolLink1, etc. 
	</p>
      </section>
      <section title="jmolMenu">
	<code>jmolMenu(arrayOfMenuItems, {menuHeight}, {id})</code>
	<p>
	  Used to display a menu of items along with associated scripts.
	  <code>arrayOfMenuItems</code> is usually specified using the JavaScript
	  square brackets [ itemA, itemB, ... ] notation. Each <code>item</code>
	  is generally another array which contains a script, a label, and an
	  optional isChecked flag. If an <code>item</code> is a single string
	  instead of an array, then that string is used for both the script
	  and the label.
	</p>
	<p>
	  <code>menuHeight</code> is used to specify the height of the menu.
	  If unspecified or 1, the menu is a combo-box that drops down when
	  the user clicks on it. If it is 2 or greater then a menu with
	  the specified number of lines will be displayed. If the value of
	  the <code>menuHeight</code> parameter is -1 then the menu height
	  will automatically be calculated to be the same length as the
	  number of items, thereby eliminating any scrolling.
	</p>
	<p>
	  <code>id</code> will be set as both the HTML id and HTML name. It
	  will default to jmolMenu0, jmolMenu1, etc. 
	</p>
      </section>
    </section>
    
    <section title="Intermediate Scripting Commands">
      <section title="jmolSetAppletColor">
	<code>
	  jmolSetColor(bgcolor,
	               {boxfgcolor},
	               {progresscolor},
	               {boxbgcolor})
	</code>
	Used to set the background color of the applet. <code>bgcolor</code>
	is specified using HTML "#RRGGBB" notation or as one of the 
	<a href="http://www.webcolors.freeserve.co.uk/names140.htm"
	   target="colors140">
	  140 JavaScript color names
	</a>.
	<p>
	  <i>Advanced: The text color and progress bar
	  color for the Java Plug-in can optionally be set.</i>
	</p>
      </section>

      <section title="jmolHtml">
	<code>jmolHtml(html)</code>
	<p>
	  Allows you to pass arbitrary text, possibly containing html tags,
	  directly to the page ... sometimes this is more convenient than
	  closing and reopening the <code>script</code> tags. The effect is
	  exactly the same as:<br />
	  <code>&lt;/script&gt;<i>html</i>&lt;script&gt;</code>
	</p>
      </section>

      <section title="jmolBr">
	<code>jmolBr()</code>
	<p>
	  The same as <code>jmolHtml("<br />")<br /></code> which is the
	  same as <code>&lt;/script&gt;&lt;br /&gt;&lt;script&gt;</code>
	</p>
      </section>
      
      <section title="jmolAppletInline">
	<code>jmolApplet(size, inlineModel, {script}, {nameSuffix})</code>
	<p>
	  Creates an instance of the JmolApplet, but passes in the
	  <i>contents</i> of the molecular model rather than
	  a file name or URL. If you are not pulling your molecular
	  model data from a database then you probably do not want
	  to use this.
	</p>
      </section>

      <section title="jmolLoadInline">
	<code>jmolLoadInline(model, {targetSuffix})</code>
	<p>
	  Used in database applications where the molecular model
	  is available as a string. This directly loads
	  <code>model</code> into the applet. Note that this is
	  <i>not</i> the file name ... it is the <i>contents</i> of
	  the file.
	</p>
      </section>

      <section title="jmolScript">
	<code>jmolScript(script, {targetSuffix})</code>
	<p>
	  Use this if you want to construct your own UI controls or to
	  execute <code>script</code> based upon JavaScript events.
	  The UI controls above are essentially implemented using
	  this <code>jmolScript</code> function.
	  When more than one JmolApplet is being displayed,
	  <code>targetSuffix</code> is used to identify a particular
	  instance.
	</p>
      </section>

    </section>

    <section title="Advanced Applet Scripting">
      <section title="jmolDebugAlert">
	<code>jmolDebugAlert({enableAlerts})</code>
	<p>
	  Puts up alert boxes for debugging. Use carefully or
	  you will get a <i>lot</i> of alerts. Explicitly
	  pass in a <code>false</code> parameter to turn it off.
	</p>
      </section>

      <section title="jmolSetTarget">
	<code>jmolSetTarget(targetSuffix)</code>
	<p>
	  Do not use this unless you are displaying multiple applets
	  at the same time <i>and</i> your Jmol.js UI controls
	  are not sequentially following their associated
	  <code>jmolApplet</code> invocations.
	</p>
	<p>
	  If you understood the previous sentence then you can
	  probably figure out what <code>jmolSetTarget</code> does. 
	</p>
	<p>
	  All JmolApplets which are generated by the Jmol.js library
	  start with the name/id <code>"jmol-"</code>. By default
	  they are numbered sequentially starting from 0. If you
	  have the need/desire to provide your own suffix then
	  do so with your calls to <code>jmolApplet</code>.
	</p>
      </section>

      <section title="jmolRadio">
	<code>
	  jmolRadio(script,
	            {labelHtml}, {isChecked}, {separatorHtml})
	</code>
	<p>
	  First, try very hard to use <code>jmolRadioGroup</code>.
	  If your layout does not allow you to do that, then
	  use this to allocate individual radio buttons. Radio
	  buttons will be assigned to the same group until
	  you call <code>jmolStartNewRadioGroup</code>.
	</p>
      </section>
      <section title="jmolStartNewRadioGroup">
	<code>jmolStartNewRadioGroup()</code>
	<p>
	  Do not use this unless you are working with multiple
	  radio groups whose layout is so complicated that you cannot
	  use <code>jmolRadioGroup</code>.
	</p>
      </section>

      <section title="jmolInitializeBypass">
	<code>jmolInitializeBypass()</code>
	<p>
	  This routine can be called if you wish to bypass the
	  normal Jmol.js JavaScript library initialization. It
	  simply sets a flag so that the other library entry
	  points do not complain that the library was not
	  initialized.
	</p>
	<p>
	  The normal <code>jmolInitialize()</code> routine
	  calls <code>jmolSetCodeBase()</code>,
	  <code>jmolCheckBrowser()</code>, and
	  <code>jmolOnloadResetForms()</code>. This routine
	  exists to support the <i>rare</i> case where someone
	  wants to bypass this normal initialization sequence. 
	</p>
      </section>

      <section title="jmolSetCodebase">
	<code>jmolSetCodebase(directory)</code>
	<p>
	  This routine is called by <code>jmolInitialize()</code>.
	  <i>Do not call this routine unless you want to explicitly
	  avoid calling </i><code>jmolInitialize()</code><i> and you
	  are prepared to defend your actions.</i>
	</p>

	<p>
	  Sets the location of the JmolApplet.jar file on your web server.
	  There should generally be one copy of the JmolApplet.jar file
	  on your server and all web pages should point to that one .jar
	  file.
	</p>
      </section>

      <section title="jmolCheckBrowser">
	<code>jmolCheckBrowser({unsupportedBrowserURL})</code>
	<p>
	  This routine is called by <code>jmolInitialize()</code>.
	  <i>Do not call this routine unless you want to explicitly
	  avoid calling </i><code>jmolInitialize()</code><i> and you
	  are prepared to defend your actions.</i>
	</p>

	<p>
	  Checks users web browser for compliance. If the browser is
	  incapable of supporting Jmol then the page is redirected to
	  <code>unsupportedBrowserURL</code>. If unspecified then
	  an alert message is opened.
	</p>
      </section>

      <section title="jmolCheckJava">
	<code>jmolCheckJava({noJavaURL})</code>
	<p>
	  This routine is called by <code>jmolInitialize()</code>.
	  <i>Do not call this routine unless you want to explicitly
	  avoid calling </i><code>jmolInitialize()</code><i> and you
	  are prepared to defend your actions.</i>
	</p>

	<p>
	  Checks users web browser for Java capability. Assumes that
	  <code>jmolCheckBrowser()</code> has already been called.
	  If the browser does not have Java enabled then the
	  page is redirected to <code>noJavaURL</code>.
	  If unspecified then an alert message is opened.
	</p>
      </section>

      <section title="jmolOnloadResetForms">
	<code>jmolOnloadResetForms()</code>
	<p>
	  This routine is called by <code>jmolInitialize()</code>.
	  <i>Do not call this routine unless you want to explicitly
	  avoid calling </i><code>jmolInitialize()</code><i> and you
	  are prepared to defend your actions.</i>
	</p>
	<p>
	  Hooks the <code>window.onload</code> event so that
	  forms will be reset when the user hits the reload/refresh
	  button. 
	</p>
      </section>

    </section>
    
    <section title="Cascading Style Sheet support">
      <section title="jmolSetAppletCssClass">
	<code>jmolSetAppletCssClass(appletCssClass)</code>
	<p>
	  Set the cascading style sheet class that is to be used
	  within the <code>applet</code> tags generated by
	  <code>jmolApplet</code> and <code>jmolAppletInline</code>.
	</p>
      </section>
      <section title="jmolSetButtonCssClass">
	<code>jmolSetButtonCssClass(buttonCssClass)</code>
	<p>
	  Set the cascading style sheet class that is to be used
	  within the <code>input</code> tags generated by
	  <code>jmolButton</code>.
	</p>
      </section>
      <section title="jmolSetCheckboxCssClass">
	<code>jmolSetCheckboxCssClass(checkboxCssClass)</code>
	<p>
	  Set the cascading style sheet class that is to be used
	  within the <code>input</code> tags generated by
	  <code>jmolCheckbox</code>.
	</p>
      </section>
      <section title="jmolSetRadioCssClass">
	<code>jmolSetRadioCssClass(radioCssClass)</code>
	<p>
	  Set the cascading style sheet class that is to be used
	  within the <code>input</code> tags generated by
	  <code>jmolRadioGroup</code> and <code>jmolRadio</code>.
	</p>
      </section>
      <section title="jmolSetLinkCssClass">
	<code>jmolSetLinkCssClass(linkCssClass)</code>
	<p>
	  Set the cascading style sheet class that is to be used
	  within the <code>a</code> tags generated by
	  <code>jmolLink</code>.
	</p>
      </section>
      <section title="jmolSetMenuCssClass">
	<code>jmolSetMenuCssClass(menuCssClass)</code>
	<p>
	  Set the cascading style sheet class that is to be used
	  within the <code>select</code> tags generated by
	  <code>jmolMenu</code>.
	</p>
      </section>
    </section>

  </body>
</document>


