/* $RCSfile$
 * $Author$
 * $Date$
 * $Revision$
 *
 * Copyright (C) 2002-2003  The Jmol Development Team
 *
 * Contact: jmol-developers@lists.sf.net
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 *  02111-1307  USA.
 */
package org.openscience.jmol.io;

import org.openscience.jmol.viewer.*;
import org.openscience.jmol.ChemFile;
import java.util.Vector;
import java.io.BufferedReader;
import java.io.Reader;

/* Generated by Together */
abstract class DefaultChemFileReader implements ChemFileReader {

  protected org.openscience.cdk.tools.LoggingTool logger;

  /**
   * Create an ChemFile reader.
   *
   * @param input source of ChemFile data
   */
  protected DefaultChemFileReader(JmolViewer viewer, Reader input) {
    this(viewer, input, "Unknown Reader");
  }

  /**
   * Create an ChemFile reader.
   *
   * @param input source of ChemFile data
   */
  protected DefaultChemFileReader(JmolViewer viewer, Reader input, String name) {
    logger = new org.openscience.cdk.tools.LoggingTool(name);
    this.viewer = viewer;
    this.input = new BufferedReader(input);
  }

  /**
   * Adds a reader listener.
   *
   * @param l the reader listener to add.
   */
  public void addReaderListener(ReaderListener l) {
    listenerList.addElement(l);
  }

  /**
   * Removes a reader listener.
   *
   * @param l the reader listener to remove.
   */
  public void removeReaderListener(ReaderListener l) {
    listenerList.removeElement(l);
  }

  /**
   * Sends a frame read event to the reader listeners.
   */
  protected void fireFrameRead() {

    for (int i = 0; i < listenerList.size(); ++i) {
      ReaderListener listener = (ReaderListener) listenerList.elementAt(i);

      // Lazily create the event:
      if (readerEvent == null) {
        readerEvent = new ReaderEvent(this);
      }
      listener.frameRead(readerEvent);
    }
  }

  /**
   * Sets whether bonds are enabled in the files and frames which are read.
   *
   * @param bondsEnabled if true, enables bonds.
   */
  public void setBondsEnabled(boolean bondsEnabled) {
    this.bondsEnabled = bondsEnabled;
  }

  /**
   * An event to be sent to listeners. Lazily initialized.
   */
  private ReaderEvent readerEvent = null;

  /**
   * Holder of reader event listeners.
   */
  private Vector listenerList = new Vector();

  /**
   * Whether bonds are enabled in the files and frames read.
   */
  protected boolean bondsEnabled = true;

  /**
   * The source for data.
   */
  protected BufferedReader input;
  JmolViewer viewer;
}
