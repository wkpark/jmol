// checkCIP.spt -- test suite for Jmol CIPChirality.java
// Bob Hanson hansonr@stolaf.edu 4/18/2017 7:44:43 AM
// updated 4/29/2017 1:26:31 PM

nOK = 0;

thisN = 0;
stopped = false;

 function checkRS(m, n, key) {
  if (_argCount == 2 && 0 + n != n) {
    key = n;
    n = 0;
  }
  if (!n)
    n = 1;
  var doCheck = !!key
  var a = 0;
  if (m.find("//")) {
    key = m.split("//")[2]
    m = m.split("//")[1]
    if (key.find("@")) {
      a = key.split("@")[2]
      key = key.split("@")[1]
    }
    doCheck = key;
  }
  if (thisN && (nOK + 1) != thisN) {
   nOK++;
   return;
  }
  print "loading " + (nOK + 1) + ": " + m + " " + n + " " +  key + " " + docheck
  set useMinimizationThread false
  load @m @n filter "2D"
  if (!{_H})  calculate hydrogens
  set labelfor {_C} "%[atomname]"
  rotate best
  refresh
  background label yellow
  color labels black
  refresh
  if (a) {
    select atomno = @a
  } else {
    calculate chirality
    select (chirality != "")
  }
  set labelfor {selected} "%[atomname] %[chirality]"
  var rs = {selected}.label("%[chirality]").join("")
  print " " + doCheck + " key=" + key + " found=" + rs 
  if (doCheck) {
    var ref = (docheck == key ? "" : _M.molData["chiral_atoms"].replace("\n","").replace(" ","") + _M.molData["stereounits"])
    if (ref) {
      if (ref.find("focus:")) {
        var tokens = ref.split("focus:");
        ref = ""
        var refs = []
        for (var focus in tokens) {
          if (!focus) continue
          var items = focus.split("descriptor:")
          var atoms = items[1].split(true)
          rs = items[2].trim()
          var na = atoms.length
          refs[1 + atoms[1]] = rs // first
          refs[1 + atoms[0]] = rs // last
        }
        var na = refs.length
        for (var j = 1; j <= na; j++) {
          if (refs[j])
            ref += "" + j + refs[j]
        }
      }
      key = ref.replace("Sa","P").replace("Ra","M").replace("sa","p").replace("ra","m");
      rs = {selected}.label("%i%[chirality]").join("")
    } else if (key == "*") {
      key = ""
    }
    if (key like rs) {
      print "OK\t" + m + "\t" + rs
      nOK++
    } else {
      var s = "" + n + "??\t" + m + "\t found " + rs + "; should be " + key
      refresh 
      print s
      var ans = prompt(s.replace("\t"," ") + " \n\n continue?", "yes")
      if (ans != "yes") quit 
    }
  } else {
      print m + "\t" + rs
  }
  refresh
}

// check a set of files in a directory based on a file listing with annotations

function checkRdir(name, type) {
  x = load(name + ".txt").lines
  for (var f in x) {
    f = f.trim();
    if (f == "#QUIT") break
    if (f == "#stop") exit
    if (!f || f.find("#") == 1) continue
    if (f.find("$") != 1) 
      f = name + "/" + f
    if (type)
      checkRS(f, type)
    else
      checkRS(f)
  }
}

// check selected models in a multi-model SDF file

function checkRSDF(reffile, first, last, skip, corrections) {
  for (var i = first; i <= last; i++) {
    if (skip & i) continue;
    var fix = corrections["" + i];
    checkrs(reffile + (fix ? "//" + fix : ""), i, "*")
  }
}


//////////////////////////////////////////////////////////////////////////

//
// reading files from a directory cip/xx based on file list in cip/xx.txt 
//


checkRdir("cip/MP", "*");
checkRdir("cip/RSEZ", "*");
checkRdir("cip/NN", "*");
checkRdir("cip/EZ", "*");
checkRdir("cip/SP", "*");
checkRdir("cip/RS", "*");
checkRdir("cip/R", "R");
checkRdir("cip/S", "S");


//
// structures from a multi-model SDF file that has focus:/descriptor: annotations
//


corrections = {
  "12":"SEREEE", // extra "11E" in file 
  "53":"ZREEZZZZZZZ" // cumulene indication is not in order we can handle in SDF file
}
skip = 
   ({34 35 36 37}) || // pentacoordinate P; axial
     //({15 16 17 18 19 20 24 53}) || // allene, cumulene   
       ({}) // failed or ignore

checkRSDF("cip/testSuites/stereo_test_cases.sdf", 1, 64, skip, corrections)


print "DONE: " + nOK


/**

// individual checks made along the way

checkrs("cip/SREZ/test1.mol", "SEER")
checkrs("cip/RS/Mata_fig7_I_R.mol","?")
checkrs("testn2.mol","?")
checkrs("cip/EZ/deb.mol");
checkrs("$(R)-3-hydroxy-1,4-heptadiyne", "R")
checkRS("$(R)-glycidol", "R")
checkRS("$glucose", "RSRR")
checkRS("$(2S,3R)-2,3-oxiranediol", "SR")
checkRS("$(S)-2-butanol", "S")
checkRS("$(R)-2-butanol", "R")
checkRS("$(2S,3R)-2,3-butanediol", "SR")
checkRS("$(2S,3S)-2,3-butanediol", "SS")
checkRS("$(2R,3R)-2,3-butanediol", "RR")
checkRS("$(2R,3S)-2,3-butanediol", "RS")
checkRS("$1,4-dimethylcyclohexane", "")
checkRS("$cholesterol", "RRSSSRSR") // (3S,8S,9S,10R,13R,14S,17R) and sidechain (R)
checkRS("==ta1", "SSRSRSSRSRS") // taxol (1S,2S,3R,4S,7R,9S,10S,12R,15S) and sidechain (2R,3S)
checkRS("cip/RS/(1S,5R)-bicyclo[3.1.0]hex-2-ene_3D.mol")
