<chapter>
<title>JavaScript integration</title>
<para>
  Using JavaScript commands embedded in web pages, you can control
  the behavior of the JmolApplet. This flexibility enables you to
  create complex user interactions that are controlled using standard
  web page elements.
</para>
<section>
  <title>Web Browser support</title>
  <para>
    The underlying technology that supports this is known as LiveConnect.
    The LiveConnect layer provides the data and method conversion interface
    between the JavaScript world and the Java world.
  </para>
  <para>
    Netscape/Mozilla and Internet Explorer have both supported LiveConnect for
    some time. Under Mac OS X, LiveConnect became available with 10.3 Panther
    / Safari 1.2
  </para>
</section>
<section>
  <title>JavaScript LiveConnect overview</title>
  <para>
    In order to reference an applet on an HTML page the applet must
    be given a name. We recommend that you use the name 'jmol' as in:
    <programlisting>
      <![CDATA[
      <applet name="jmol" code="JmolApplet" archive="JmolApplet.jar"
              width="350" height="350">
	<param name="progressbar"   value="true" />
	<param name="progresscolor" value="blue" />
	<param name="boxmessage"    value="Loading Jmol ..." />
	<param name="boxbgcolor"    value="black" />
	<param name="boxfgcolor"    value="white" />  
	
	<param name="load"          value="caffeine.xyz" />
      </applet>
      ]]>
    </programlisting>
  </para>
  <para>
    Jmol v10 <emphasis>requires</emphasis> the
    set of <command>progressbar</command> parameters.
    They provide visual feedback to the end-user while
    the applet is downloading.
  </para>
  <para>
    If you would like to have multiple instances of the applet on a
    single page then you should give them unique names.
  </para>
  <para>
    To ensure portability across browsers, all JavaScript references
    to the JmolApplet should start with <command>document</command>.
    Therefore, assuming you have named your applet
    <command>jmol</command>, all your references to the applet will
    start with <command>document.jmol</command>. All JavaScript
    method references in this documentation will use this notation. 
  </para>
  <para>
    Within a web page, there are several ways to invoke a JavaScript
    method based upon user events. One method is to use the
    'javascript:' protocol in an href, as in:
    <programlisting><![CDATA[
      <a href="javascript:document.jmol.load('dna.xyz')">
	Load DNA molecule
      </a>
      ]]>
    </programlisting>
  </para>
  <para>
    Another method is to use explicit JavaScript event tags, as in:
    <programlisting><![CDATA[
      <form name="myform">
	<input type="button" value="Rotate X 90"
	  onClick="document.jmol.script('rotate x 90')">
	<input type="button" value="Rotate Y 90"
	  onClick="document.jmol.script('rotate y 90')">
	<input type="button" value="Rotate Z 90"
	  onClick="document.jmol.script('rotate Z 90')">
      </form>
      ]]>
    </programlisting>
  </para>
  <para>
    For further information on JavaScript programming we recommend
    that you search for JavaScript development resources on the web
    or at your nearest technical bookstore.
  </para>
  <para>
    To get things to run on an installed base of older Netscape and
    IE browsers you may want to consider looking for 'old' documentation
    rather than 'up to date' documentation. One good reference source is
    http://developer.netscape.com/docs/manuals/js/client/jsguide/index.html	
  </para>
</section>
<section>
  <title>JmolApplet JavaScript API</title>
  <section>
    <title>document.jmol.script(String)</title>
    <para>
      The string parameter passed to the JmolApplet is a
      RasMol/Chime/Jmol script command to control the rendering
      of the JmolApplet.
    </para>
    <programlisting>
      document.jmol.script('load caffeine.xyz; spacefill off; wireframe');
    </programlisting>
  </section>
</section>
</chapter>
