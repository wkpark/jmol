<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "../xml-dtd-4.2/docbookx.dtd"
>
<book id="jmol-devel-guide">
  <bookinfo>
    <title>Jmol Developer's Guide</title>
  </bookinfo>

  <chapter id="Prerequisites">
    <title>Prerequisites</title>
    <para>
      <itemizedlist>
        <listitem>
          <para>Java 2 JDK 1.4
	  (<ulink url="http://java.sun.com/">
	    http://java.sun.com/</ulink>)
          </para>
        </listitem>
        <listitem>
          <para>Apache Ant
	  (<ulink url="http://jakarta.apache.org/ant">
	    http://jakarta.apache.org/ant</ulink>)
          </para>
	  <para>
	    On Linux/Unix/OSX try to install ant using a package installer
	  </para>
        </listitem>
        <listitem>
	  <para>CVS
	    (The definitive CVS documentation is at
	    <ulink url="http://cvsbook.red-bean.com/cvsbook.html">
	      http://cvsbook.red-bean.com/cvsbook.html
	    </ulink>)
	  </para>
	  <para>
	    On Win32 you can use wincvs from
	    <ulink url="http://www.wincvs.org">
	      www.wincvs.org
	    </ulink>
	  </para>
	  <para>
	    On Mac OSX the cvs software comes on the Developer's CD,
	    which can be downloaded free from Apple. 
	  </para>
	</listitem>
      </itemizedlist>
    </para>
  </chapter>

  <chapter id="CheckingOutJmol">
    <title>Checking Out Jmol from CVS</title>
    <para>
      For anonymous checkout from SourceForge cvs:
      <programlisting>
	cvs -d:pserver:anonymous@cvs.sf.net:/cvsroot/jmol login
      </programlisting>
      Press the <command>Enter</command> key when prompted for the password
      <programlisting>
	cvs -d:pserver:anonymous@cvs.sf.net:/cvsroot/jmol co -d Jmol-HEAD Jmol
      </programlisting>
      We work from the directory called <command>Jmol-HEAD</command>.
      <programlisting>
	cd Jmol-HEAD
      </programlisting>
      Later, to get updates ...
      <programlisting>
	cd {some-path}/Jmol-HEAD
	cvs up -dP
      </programlisting>
    </para>
  </chapter>

  <chapter id="BuildingJmol">
    <title>Building Jmol</title>
    <para>Prerequisites:
      <itemizedlist>
        <listitem>
          <para>Java 2 JDK 1.4
	  (<ulink url="http://java.sun.com/">http://java.sun.com/</ulink>)
	  
          </para>
        </listitem>
        <listitem>
          <para>Apache Ant
	  (<ulink url="http://jakarta.apache.org/ant">http://jakarta.apache.org/ant</ulink>)
          </para>
        </listitem>
        <listitem>
          <para>Jmol source code </para>
        </listitem>
      </itemizedlist>
      The Jmol source code can be either downloaded
      (see <ulink url="http://sourceforge.net/project/showfiles.php?group_id=23629">
      SourceForge project files</ulink>)
      or checked out from the CVS repository
      (see <ulink url="http://sourceforge.net/cvs/?group_id=23629">SourceForge CVS access</ulink>).
    </para>

    <para>Once you have all the prerequisites, Jmol can be built from the top
      source directory with the following command:
    </para>

    <para>On Linux/OSX/Unix,
      <programlisting>
        <prompt>[~/jmol/Jmol-HEAD]$</prompt> <command>ant</command>
      </programlisting>
    </para>

    <para>On Windows,
      <programlisting>
        <prompt>C:\jmol\Jmol-HEAD&gt;</prompt> <command>ant</command>
      </programlisting>
    </para>
  </chapter>

  <chapter id="RunningJmol">
    <title>Running Jmol</title>
    <para>
      The development version of Jmol is normally run by simply executing
      the jmol script in the Jmol development directory.
    </para>

    <para>
      On Linux/OSX/Unix,
      <programlisting>
        <prompt>[~/jmol/Jmol-HEAD]$</prompt><command>./jmol</command>
      </programlisting>
    </para>

    <para>
      On Windows,
      <programlisting>
        <prompt>C:\jmol\Jmol-HEAD&gt;</prompt><command>jmol</command>
      </programlisting>
    </para>
  </chapter>

  <chapter id="CodingStandard">
    <title>Coding Standard</title>
    <itemizedlist>
      <listitem>
	Your text editor should indent for you. If it doesn't
	then either learn how to enable it or get another
	editor.
      </listitem>
      <listitem>
	Indentation level should be two spaces
	<programlisting>
	  class Foo {
	    int someClassVariable;

	    Foo(int evenOrOdd) {
	      someClassVariable = 99;
	    }

	    ...
	  }
	</programlisting>
      </listitem>
      <listitem>
	Space characters should be used, not tabs
      </listitem>
      <listitem>
	Assignment and arithmetic operators generally contain
	spaces on both sides.
	<programlisting>
	  a = b + c;
	</programlisting>
	you are allowed to eliminate the spaces within expressions
	in order to make operator precedence more clear
	<programlisting>
	  int cSquared = a*a + b*b;
	</programlisting>
      </listitem>
      <listitem>
	spaces follow commas in argument lists
	<programlisting>
	  foo(a, 3.14159, "jmol");
	</programlisting>
      </listitem>
      <listitem>
	Lines should be no more than 80 characters wide
      </listitem>
      <listitem>
	Open brace goes on the line that starts the block.
	Close brace goes on a line by itself.
	<programlisting>
	  if (condition) {
	    ...
	  } else {
	    ...
	  }
	  
	  while (condition)
	    ...
	  }
	</programlisting>
      </listitem>
      <listitem>
	loop indexes start at 0, not 1.
      </listitem>
      <listitem>
	The <emphasis>only</emphasis> valid
	comparison operators for loop termination are
	<command>&lt;</command> and <command>&gt;=</command>
	... anything else is probably a bug.
	If you are <emphasis>sure</emphasis> that it is not a bug
	then put a comment in the code. 
      </listitem>
      <listitem>
	Use long descriptive variable names and method names. Do
	not be afraid of typing. 
      </listitem>
      <listitem>
	line-by-line comments within the code are
	<emphasis>discouraged</emphasis> ... except in very
	special circumstances. If you put in lots
	of comments like this then you may find them deleted.
      </listitem>
      <listitem>
	if you feel obligated to insert comments put them
	as javadoc before the function body
      </listitem>
      <listitem>
	If your code is changing then do not put in comments.
	<emphasis>
	  Bad/outdated comments are worse than no comments.
	</emphasis>
      </listitem>
      
      <listitem>
	You may want to look at 
	<ulink url="http://www.amazon.com/exec/obidos/ASIN/0521777682">"The 
	Elements of Java Style" by Vermeulen, et al</ulink>
      </listitem>
    </itemizedlist>
  </chapter>

  <chapter id="Releasing">
    <title>Making a release</title>
    <para>
      A Jmol release consists of both the application
      and the applet. Presumably both will have been well tested.
    </para>
    <para>
      In the <filename class="directory">samples/</filename>
      directory a number of test files are located for the input
      filters. All files below that subdirectory should be checked
      prior to a release.
    </para>
  </chapter>

  <chapter id="Packaging">
    <title>Packaging</title>
    <para>
      Distribution packages will be made for any platform for which a
      developer promises to provide support. File used to create packages
      should be commited to CVS under the Jmol/packaging
      directory. Currently the following packages are available:
      <itemizedlist>
        <listitem><para>Debian (by Egon Willighagen) </para></listitem>
        <listitem><para>RPM (by Miguel Howard) </para></listitem>
      </itemizedlist>
    </para>
  </chapter>

  <chapter id="CVS">
    <title>Working with Jmol's CVS</title>
    <para>
      This section gives information on how to work with Jmol's CVS
      at SourceForge.
    </para>
    <section id="tagging">
      <title>Tagging CVS</title>
      <para>
        It is important to tag CVS when a distribution was made. This makes it
        possible to later retrieve the exact source code from CVS in that release.
        This can be done with
        <command>cvs tag <parameter>tag-name</parameter></command>
        in the directory where the CVS files are stored.
      </para>
    </section>
    <section id="branching">
      <title>CVS Branches</title>
      <para>
        Sometimes it is convenient to have separate branches to work on.
        One for an upcoming release, and one branch for the unstable version.
        Minor bug fixes can then go into the stable branch, while major
        changes can go into the unstable branch. This section explains how
        to access, use, and create branches.
      </para>
      <section id="branch_access">
        <title>Accessing a branch</title>
        <para>
          The command <command>cvs checkout <parameter>module</parameter></command>
          by default gets the source code from the HEAD branch, which is
          the unstable branch of Jmol.
        </para>
        <para>
          Accessing a specific branch can be done with, e.g. the b6 branch:
          <programlisting>
cvs checkout -r b6 -d Jmol-6 Jmol
          </programlisting>
          This will check out a copy of the Jmol module from the b6 branch into
          a directory called <filename class="directory">Jmol-6</filename>.
        </para>
        <para>
          To determine to which branch a specific locally stored file belongs,
          you can do <command>cvs status <parameter>file</parameter></command>.
        </para>
      </section>
      <section id="branch_creating">
        <title>Creating a branch</title>
        <para>
          A branch of HEAD can be created with the <command>cvs rtag -b -r 
          HEAD <parameter>branch-name</parameter> 
          <parameter>module</parameter></command> command.
        </para>
      </section>
      <section id="branch_merging">
        <title>Merging branches</title>
        <para>
          Bug fixes which have been commited to a branch can be merged to the HEAD
          branch. To do this, check out (or update) a HEAD branch, and type in that
          directory <command>cvs update -j <parameter>branch-to-merge</parameter></command>.
          After this the branch from which the changes were merged with HEAD should
          be tagged, to make it possible to merge later changes with HEAD too.
          For example, a session might look like:
          <programlisting>
> cd ~/data/SF/Jmol/Jmol-HEAD
> cvs update -j b6
> cd ~/data/SF/Jmol/Jmol-6
> cvs tag b6-merged-20030725
          </programlisting>
          Changes made after this merger to branch b6, can then be merged with HEAD with:
          <programlisting>
> cd ~/data/SF/Jmol/Jmol-HEAD
> cvs update -j b6-merged-20030725 -j b6
> cd ~/data/SF/Jmol/Jmol-6
> cvs tag b6-merged-20031011
          </programlisting>
        </para>
      </section>
    </section>
  </chapter>
</book>


