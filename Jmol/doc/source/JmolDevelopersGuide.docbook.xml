<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
  "../../build/docbook-xml/docbookx.dtd">

<book id="jmol-devel-guide">

  <bookinfo>
    <title>Jmol Developer's Guide</title>
  </bookinfo>
  
  <chapter id="Prerequisites">
    <title>Prerequisites</title>
  
    <itemizedlist>
      <listitem>
        <para>
          Java 2 JDK 1.4 (<ulink url="http://java.sun.com/" />)
        </para>
      </listitem>
      <listitem>
        <para>
          Apache Ant (<ulink url="http://jakarta.apache.org/ant" />, not necessary if you are using Eclipse with a Windows PC -- see below.)
        </para>
        <para>
          On Linux/Unix/OSX try to install ant using a package installer
        </para>
      </listitem>
      <listitem>
        <para>
          CVS - The definitive CVS documentation is at
          <ulink url="http://cvsbook.red-bean.com/cvsbook.html" />.
        </para>
        <para>
          On Win32 you can use WinCVS from
          <ulink url="http://www.wincvs.org" />,
          but a far more sophisticated and much easier to use and install alternative is Eclipse from
          <ulink url="http://www.eclipse.org/downloads" />. (See the section below that covers Eclipse use.)
        </para>
        <para>
          On Mac OSX the cvs software comes on the Developer's CD,
          which can be downloaded free from Apple.
        </para>
      </listitem>
    </itemizedlist>
  </chapter>
  
  <chapter id="CheckingOutJmol">
    <title>Checking Out Jmol from CVS</title>
    
    <para>
      If you are using Eclipse, see <xref linkend="Eclipse" />.
    </para>
 
    <para>
      For anonymous checkout from SourceForge cvs:
    </para>
    <programlisting>
  cvs -d:pserver:anonymous@cvs.sf.net:/cvsroot/jmol login
    </programlisting>

    <para>
      Press the <command>Enter</command> key when prompted for the password:
    </para>
    <programlisting>
  cvs -d:pserver:anonymous@cvs.sf.net:/cvsroot/jmol co -d Jmol Jmol
    </programlisting>
    
    <para>
      We work from the directory called <command>Jmol</command>.
    </para>
    <programlisting>
  cd Jmol
    </programlisting>

    <para>
      Later, to get updates ...
    </para>
    <programlisting>
  cd {some-path}/Jmol
  cvs up -dP
    </programlisting>
  </chapter>
  
  <chapter id="BuildingJmol">
    <title>Building Jmol</title>

    <para>
      If you are using Eclipse, see <xref linkend="Eclipse" />.
    </para>
    
    <itemizedlist>
      <para>
        Prerequisites:
      </para>
      <listitem>
        <para>
          Java 2 JDK 1.4 (<ulink url="http://java.sun.com/" />)
        </para>
      </listitem>
      <listitem>
        <para>
          Apache Ant (<ulink url="http://jakarta.apache.org/ant" />)
        </para>
      </listitem>
      <listitem>
        <para>
          Jmol source code
        </para>
      </listitem>
    </itemizedlist>
    
    <para>
      The Jmol source code can be either downloaded (see
      <ulink url="http://sourceforge.net/project/showfiles.php?group_id=23629"
      >SourceForge project files</ulink>) or checked out from the CVS
      repository (see <ulink url="http://sourceforge.net/cvs/?group_id=23629"
      >SourceForge CVS access</ulink>).
    </para>
    
    <para>
      Once you have all the prerequisites, Jmol can be built from the top
      source directory with the following command:
    </para>
    
    <para>
      On Linux/Unix/OSX:
    </para>
    <programlisting>
  <prompt>[~/jmol/Jmol]$</prompt> <command>ant</command>
    </programlisting>
    
    <para>
      On Windows (not using Eclipse):
    </para>
    <programlisting>
  <prompt>C:\jmol\Jmol&gt;</prompt> <command>ant</command>
    </programlisting>
  </chapter>
  
  <chapter id="RunningJmol">
    <title>Running Jmol</title>
    <para>
      The development version of the Jmol application is normally run by simply executing the
      jmol script in the Jmol development directory. 
    </para>
    
    <para>
      The development version of the Jmol applet is normally run by copying the built .jar
      files into a test directory and then running a web page that accesses them. 
    </para>
 
    <para>
      If you are using Eclipse on a PC, you can run the app or the applet from within Eclipse. This allows for simpler debugging. 
      See <xref linkend="Eclipse" />.
    </para>

    <para>
      On Linux/Unix/OSX:
    </para>
    <programlisting>
  <prompt>[~/jmol/Jmol]$</prompt><command>./jmol</command>
    </programlisting>
    
    <para>
      On Windows (not using Eclipse):
    </para>
    <programlisting>
  <prompt>C:\jmol\Jmol&gt;</prompt><command>jmol</command>
    </programlisting>
  </chapter>
  
  <chapter id="CodingStandard">
    <title>Coding Standard</title>
    
    <itemizedlist>
      <listitem>
        <para>
          Your text editor should indent for you. If it doesn't then either
          learn how to enable it or get another editor.
        </para>
      </listitem>
      <listitem>
        <para>
          Indentation level should be two spaces.
        </para>
        <programlisting>
  class Foo {
    int someClassVariable;
    
    Foo(int evenOrOdd) {
      someClassVariable = 99;
    }
    
    ...
  }
        </programlisting>
      </listitem>
      <listitem>
        <para>
          Space characters should be used, not tabs.
        </para>
      </listitem>
      <listitem>
        <para>
          Assignment and arithmetic operators generally contain spaces on both
          sides.
        </para>
        <programlisting>
  a = b + c;
        </programlisting>
        <para>
          You are allowed to eliminate the spaces within expressions in order
          to make operator precedence more clear.
        </para>
        <programlisting>
  int cSquared = a*a + b*b;
        </programlisting>
      </listitem>
      <listitem>
        <para>
          Spaces follow commas in argument lists.
        </para>
        <programlisting>
  foo(a, 3.14159, "jmol");
        </programlisting>
      </listitem>
      <listitem>
        <para>
          Lines should be no more than 80 characters wide.
        </para>
      </listitem>
      <listitem>
        <para>
          Open brace goes on the line that starts the block. Close brace goes
          on a line by itself.
        </para>
        <programlisting>
  if (condition) {
    ...
  } else {
    ...
  }
  
  while (condition) {
    ...
  }
        </programlisting>
      </listitem>
      <listitem>
        <para>
          loop indexes start at 0, not 1.
        </para>
      </listitem>
      <listitem>
        <para>
          The <emphasis>only</emphasis> valid comparison operators for loop
          termination are <command>&lt;</command> and <command>&gt;=</command>
          ... anything else is probably a bug. If you are
          <emphasis>sure</emphasis> that it is not a bug then put a comment in
          the code.
        </para>
      </listitem>
      <listitem>
        <para>
          Use long descriptive variable names and method names. Do not be
          afraid of typing.
        </para>
      </listitem>
      <listitem>
        <para>
          Line-by-line comments within the code are
          <emphasis>discouraged</emphasis> ... except in very special
          circumstances. If you put in lots of comments like this then you may
          find them deleted.
        </para>
      </listitem>
      <listitem>
        <para>
          If you feel obligated to insert comments put them as javadoc before
          the function body.
        </para>
      </listitem>
      <listitem>
        <para>
          If your code is changing then do not put in comments.
          <emphasis>Bad/outdated comments are worse than no comments.</emphasis>
        </para>
      </listitem>
      <listitem>
        <para>
          You may want to look
          at <ulink url="http://www.amazon.com/exec/obidos/ASIN/0521777682">The
          Elements of Java Style by Vermeulen, et al</ulink>.
        </para>
      </listitem>
    </itemizedlist>
  </chapter>
  
  <chapter id="Releasing">
    <title>Making a release</title>
    
    <para>
      A Jmol release consists of both the application and the applet.
      Presumably both will have been well tested.
    </para>
    
    <para>
      In the <filename class="directory">samples/</filename> directory a number
      of test files are located for the input filters. All files below that
      subdirectory should be checked prior to a release.
    </para>
  </chapter>

  <chapter id="Packaging">
    <title>Packaging</title>
    
    <para>
      Distribution packages will be made for any platform for which a developer
      promises to provide support. File used to create packages should be
      commited to CVS under the Jmol/packaging directory. Currently the
      following packages are available:
    </para>
    
    <itemizedlist>
      <listitem>
        <para>
          Debian (by Daniel Leidert and Egon Wllighagen)
        </para>
      </listitem>
      <listitem>
        <para>
          RPM (by Miguel Howard)
        </para>
      </listitem>
    </itemizedlist>
  </chapter>
  
  <chapter id="CVS">
    <title>Working with Jmol's CVS</title>
    
    <para>
      This section gives information on how to work with Jmol's CVS at
      SourceForge.
    </para>
    
    <section id="tagging">
      <title>Tagging CVS</title>
    
      <para>
        It is important to tag CVS when a distribution was made. This makes it
        possible to later retrieve the exact source code from CVS in that
        release. This can be done with <command>cvs tag
        <parameter>tag-name</parameter></command> in the directory where the
        CVS files are stored.
      </para>
    </section>
    
    <section id="branching">
      <title>CVS Branches</title>

      <para>
        Sometimes it is convenient to have separate branches to work on. One
        for an upcoming release, and one branch for the unstable version. Minor
        bug fixes can then go into the stable branch, while major changes can
        go into the unstable branch. This section explains how to access, use,
        and create branches.
      </para>
      
      <section id="branch_access">
        <title>Accessing a branch</title>
        
        <para>
          The command <command>cvs checkout
          <parameter>module</parameter></command> by default gets the source
          code from the HEAD branch, which is the unstable branch of Jmol.
        </para>
        
        <para>
          Accessing a specific branch can be done with, e.g. the b6 branch:
        </para>
        <programlisting>
  cvs checkout -r b6 -d Jmol-6 Jmol
        </programlisting>
        <para>
          This will check out a copy of the Jmol module from the b6 branch into
          a directory called <filename class="directory">Jmol-6</filename>.
        </para>
        
        <para>
          To determine to which branch a specific locally stored file belongs,
          you can do <command>cvs status <parameter>file</parameter></command>.
        </para>
      </section>
      
      <section id="branch_creating">
        <title>Creating a branch</title>
        
        <para>
          A branch of HEAD can be created with the
          <command>cvs rtag -b -r HEAD <parameter>branch-name</parameter>
          <parameter>module</parameter></command> command.
        </para>
      </section>
      
      <section id="branch_merging">
        <title>Merging branches</title>
      
        <para>
          Bug fixes which have been commited to a branch can be merged to the
          HEAD branch. To do this, check out (or update) a HEAD branch, and
          type in that directory <command>cvs update -j
          <parameter>branch-to-merge</parameter></command>. After this the
          branch from which the changes were merged with HEAD should be tagged,
          to make it possible to merge later changes with HEAD too. For
          example, a session might look like:
        </para>
        <programlisting>
  &gt; cd ~/data/SF/Jmol/Jmol
  &gt; cvs update -j b6
  &gt; cd ~/data/SF/Jmol/Jmol-6
  &gt; cvs tag b6-merged-20030725
        </programlisting>
      
        <para>
          Changes made after this merger to branch b6, can then be merged with
          HEAD with:
        </para>
        <programlisting>
  &gt; cd ~/data/SF/Jmol/Jmol
  &gt; cvs update -j b6-merged-20030725 -j b6
  &gt; cd ~/data/SF/Jmol/Jmol-6
  &gt; cvs tag b6-merged-20031011
        </programlisting>
      </section>
    </section>
  </chapter>
  
  <chapter id="Eclipse">
    <title>Using Eclipse</title>
    
    
    
    <section id="Eclipse_prerequisites">
      <title>Eclipse prerequisites</title>
    
    <itemizedlist>
      <listitem>
        <para>
          Java 2 JDK 1.4 (<ulink url="http://java.sun.com/" />)
        </para>
      </listitem>
      <listitem>
        <para>
          Eclipse SDK 3.1 (<ulink url="http://www.eclipse.org/downloads" />)
        </para>
      </listitem>
    </itemizedlist>
    
    
      <para>
        Eclipse must be installed and correctly configured before following
        this procedure.
      </para>
    </section>
    
    <section id="Eclipse_CVSConfig">
      <title>CVS Repository configuration</title>
      
      <para>
        To configure Eclipse to access Jmol's CVS repository, do the following:
      </para>
    
      <itemizedlist>
        <listitem>
          <para>
            Launch Eclipse.
          </para>
        </listitem>
        <listitem>
          <para>
            Using the menu system, navigate to <command>Window | Open Perspective | Other... | CVS Repository Exploring</command>
          </para>
        </listitem>
        <listitem>
          <para>
            Right click in the <command>CVS Repositories</command> windows and
            select <command>New</command>
             <command>Repository Location...</command> in the contextual menu.
          </para>
        </listitem>
        <listitem>
          <para>
            In the <command>Add CVS Repository</command> window, enter the
            following values:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                Host: <command>cvs.sourceforge.net</command>
              </para>
            </listitem>
            <listitem>
              <para>
                Repository path: <command>/cvsroot/jmol</command>
              </para>
            </listitem>
            <listitem>
              <para>
                Authentication: <command>anonymous</command> for anonymous
                access, or your login id for developer access.
              </para>
            </listitem>
            <listitem>
              <para>
                Password: empty for anonymous access, or your password for
                developer access.
              </para>
            </listitem>
            <listitem>
              <para>
                Connection type: <command>pserver</command> for anonymous
                access, <command>extssh</command> for developer access.
              </para>
            </listitem>
            <listitem>
              <para>
                Check <command>Use Default Port</command> and
                <command>Validate Connection on Finish</command>.
              </para>
            </listitem>
            <listitem>
              <para>
                You can choose to check <command>Save Password</command> or not.
              </para>
            </listitem>
            <listitem>
              <para>
                Click on <command>Finish</command>.
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>
    
    <section id="Eclipse_CheckingOut">
      <title>Checking Out Jmol from CVS</title>
      
      <para>
        To check out Jmol from CVS, do the following:
      </para>
      
      <itemizedlist>
        <listitem>
          <para>
            Switch to the <command>CVS Repository Exploring</command>
            perspective.
          </para>
        </listitem>
        <listitem>
          <para>
            Click on the repository location you added in the previous section.
            and then click on <command>HEAD</command>. 
            You should see a message on the status line indicating that Eclipse is connecting to the server.
          </para>
        </listitem>
        <listitem>
          <para>
            Right click on <command>Jmol</command> and select <command>Check
            Out</command> in the contextual menu. The files should start transferring. 
            If you do not want to wait, you can indicate that you want the transfer to occur in the background. 
          </para>
        </listitem>
        <listitem>
          <para>
            If you want, you can also check out Jmol-web: Right click on
            <command>Jmol-web</command> and select <command>Check out</command>
            in the contextual menu.
          </para>
        </listitem>
      </itemizedlist>
    </section>
    
    <section id="Eclipse_Configuring">
      <title>Configuring Eclipse to build Jmol</title>
      
      <para>
        To configure Eclipse 3.1 to build Jmol, you need to make sure 
        (a) the location of the Java compiler executable (javac.exe) is identified, and 
        (b) Eclipse is using the same version of the Java compiler as the Java Runtime Environment. 
      </para>

      <itemizedlist>
        <listitem>
          <para>
          (a) Identifying the Java compiler. Ant needs to know where to find javac.exe. 
          From <command>Window | Preferences...| Ant |Runtime</command> click on <command>global entries</command>, then select <command>Add External JARs</command>. 
          Navigate to the directory containing tools.jar, probably something like c:\j2sdk1.4.2_10\lib, and select tools.jar.
          </para>
        </listitem>
        <listitem>
          <para>
          (b) Matching the Java compiler to the Java Runtime Environment. 
          From <command>Window | Preferences...</command> select <command>Java</command>. 
          Compare the version listed for the compiler with that for the selected <command>installed JREs</command>. 
          If they are not the same, use the <command>search</command> facility to find more installed JREs. Then select the JRE that matches the compiler. 
          </para>
        </listitem>
      </itemizedlist>

    </section>
    
    <section id="Eclipse_Running">
      <title>Running and Debugging Jmol</title>
      
      <para>
        You can run and debug Jmol directly within Eclipse. 
      </para>
      
      <para>
        From <command>Window | Open Perspective </command> open a Java Perspective (using <command>Other...</command> if necessary).
      </para>

      <para>
        To run either the application or the applet
        right-click <command>Jmol</command> under the Projects tab, select <command>Run As</command>, and then select
        your choice, Java Applet or Java Application. The main class is <command>org.openscience.jmol.app.Jmol</command>. 
      </para>
    </section>
    
    <section id="Eclipse_Building">
      <title>Building Jmol</title>
    
      <para>
        If not already done, from <command>Window | Open Perspective </command> open a Java Perspective (using <command>Other...</command> if necessary).
      </para>

      <para>
        To make a full build of Jmol under Eclipse, just do the following:
        Under the Jmol [cvs.sourceforge.net] entry, find <command>build.xml</command> and right-click it.
        Select <command>Run As | Ant Build</command> in the contextual menu. If the build fails, look carefully at
        the message, and if you can't figure it out, send a copy of it in an email message to jmol-developers@sourceforge.net. 
        Problems might include Ant not being able to find the Java compiler ("JAVA_HOME not in CLASSPATH?") or a difference in 
        Java compiler and runtime environment versions ("wrong version...").
      </para>
    </section>
    
  </chapter>

</book>


